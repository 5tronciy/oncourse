package ish.oncourse.server.db

import groovy.sql.Sql
import org.apache.commons.lang.RandomStringUtils
import org.junit.After
import org.junit.Before
import org.junit.Test

import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.SQLException

class DerbyDbTest {
	private static
	final CREATE_MODULE = 'CREATE TABLE Module (id BIGINT NOT NULL, title VARCHAR(200), CONSTRAINT PK_MODULE PRIMARY KEY (id));\n' +
			'CREATE INDEX Module_title ON Module(title);\n' +
			'\n' +
			'ALTER TABLE MODULE ADD COLUMN ID_TEMP BIGINT GENERATED BY DEFAULT AS IDENTITY;\n' +
			'UPDATE MODULE SET ID_TEMP = ID;\n' +
			'ALTER TABLE MODULE DROP ID;\n' +
			'RENAME COLUMN MODULE.ID_TEMP TO ID;\n' +
			'\n' +
			'ALTER TABLE MODULE ADD CONSTRAINT PK_MODULE PRIMARY KEY (ID);\n'


	def INSERT_MODULE = 'INSERT INTO Module\n' +
			'(title)\n' +
			'VALUES(:title)'


    Sql sql
	def i
	@Before
    void beforeTest() {
		createDb()
		i = 0
	}
	@After
    void afterTest() {
		try {
			DriverManager.getConnection("jdbc:derby:memory:onCourse_derby;drop=true")
		} catch (SQLException e) {}
	}

	def createDb() {
		Connection connection = DriverManager
				.getConnection("jdbc:derby:memory:onCourse_derby;create=true")
		sql = new Sql(connection)
		cleanUpBeforeCreate(connection, sql)
		CREATE_MODULE.split(";").each { value -> if (!value.trim().empty) sql.executeUpdate(value.trim()) }
		sql.connection.setAutoCommit(false)
	}

	static def cleanUpBeforeCreate(Connection connection, Sql sql) {
		ResultSet resultSet = connection.getMetaData()
				.getTables(null, null, "MODULE", null)
		if(resultSet.next()) {
			sql.executeUpdate("ALTER TABLE Module DROP CONSTRAINT PK_MODULE")
			sql.executeUpdate("DROP TABLE Module")
		}
	}

	private insertModule = {
		sql.execute([title: RandomStringUtils.random(200)], INSERT_MODULE)
	}

	@Test
    void testPostUpdate() {
		sql.executeUpdate('DROP INDEX Module_title')
		sql.commit()
		sql.executeUpdate('CREATE INDEX Module_title ON Module(title)')
		sql.commit()

		while (i < 35) {
			insertModule()
			i++
		}
		sql.commit()
	}

}