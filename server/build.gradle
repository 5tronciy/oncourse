dependencies {
	compile project(':common')
	compile project(':waCommon')
	compile project(':webservices-client')

	compile 'javax.jmdns:jmdns:3.4.1'

	compile 'org.apache.cayenne:cayenne-server:3.1B1'
	compile 'org.apache.cayenne:cayenne-lifecycle:3.1B1'
	compile 'org.apache.cayenne:cayenne-tools:3.1B1'
	compile 'foxtrot:foxtrot-core:4.0'
	compile 'org.apache.cxf:cxf-bundle:2.4.2'

	compile module("org.eclipse.jetty:jetty-server:8.1.5.v20120716") {
    	dependencies(
        	"org.eclipse.jetty.orbit:javax.servlet:3.0.0.v201112011016@jar"
    	)
	}
	compile 'org.eclipse.jetty:jetty-servlet:8.1.5.v20120716'
	compile 'org.eclipse.jetty:jetty-security:8.1.5.v20120716'
	compile 'org.eclipse.jetty:jetty-http:8.1.5.v20120716'
	compile 'org.eclipse.jetty:jetty-util:8.1.5.v20120716'
	compile 'org.eclipse.jetty:jetty-io:8.1.5.v20120716'
	compile 'org.eclipse.jetty:jetty-continuation:8.1.5.v20120716'

	compile 'org.apache.derby:derby:10.9.1.0'
	compile 'org.apache.derby:derbyclient:10.9.1.0'
	compile 'org.apache.derby:derbynet:10.9.1.0'
	compile 'org.liquibase:liquibase-core:2.0.5'

	compile ('net.sf.jasperreports:jasperreports:4.6.0') {
		exclude group: 'org.apache.poi', module: 'poi-ooxml'
	}

	compile 'net.sourceforge.jtds:jtds:1.2.4'
	compile 'mysql:mysql-connector-java:5.1.21'
	compile 'net.sourceforge.saxon:saxon:9.1.7'
	compile 'com.google.inject:guice:3.0'
	compile 'org.quartz-scheduler:quartz:2.1.5'
	compile 'org.slf4j:slf4j-api:1.6.6'
	compile 'org.slf4j:slf4j-log4j12:1.6.4'
	compile 'commons-dbcp:commons-dbcp:1.4'

  	testCompile 'org.mockito:mockito-core:1.9.0'
  	testCompile 'org.apache.derby:derbytools:10.9.1.0'
  	testCompile 'org.eclipse.jetty:test-jetty-servlet:8.1.5.v20120716'
  	testCompile 'dbunit:dbunit:2.4.8'
}

jar {
	manifest {
		from sharedManifest
		attributes 'mainClass': 'ish.oncourse.server.AngelServer'
	}
}

test {
	
	doFirst {
		copy {
			from "$projectDir/build/resources/main/resources/liquibase"
			into "$workingDir/resources/liquibase"
		}
	}
	
	dbTests = hasProperty('database') ? database : "derby-test"

	switch (dbTests) {
		case "derby-test":
			systemProperty 'testDatabaseUri', testDatabaseUriDerby
			exclude '**/db/Mysql*'
			exclude '**/db/Mssql*'
			break

		case "mssql-test":
			systemProperty 'testDatabaseUri', testDatabaseUriMssql
			exclude '**/db/Mysql*'
			exclude '**/db/Derby*'
			break

		case "mysql-test":
			systemProperty 'testDatabaseUri', testDatabaseUriMysql
			exclude '**/db/Mssql*'
			exclude '**/db/Derby*'
			break
	}
	
	doLast {
		delete "$workingDir/resources/liquibase"
	}
}

compileJava () {
	doFirst {
		logger.lifecycle("Running cgen to create Cayenne entity files.")
		ant.taskdef(resource: 'org/apache/cayenne/tools/antlib.xml', classpath: project.configurations.compile.asPath) 
			
		//classes for server
		ant.cgen(	map:"${projectDir}/../common/src/main/resources/cayenne/AngelMap.map.xml", 
					destDir:"${projectDir}/src/main/java", 
					superPkg:"ish.oncourse.server.cayenne.glue",
					template:"${projectDir}/../common/src/main/resources/cayenne/dotemplates/subclass.vm",
					superTemplate:"${projectDir}/../common/src/main/resources/cayenne/dotemplates/superclass.vm",
					makepairs:"true")

		//client-side classes for server
		ant.cgen(	map:"${projectDir}/../common/src/main/resources/cayenne/AngelMap.map.xml", 
					destDir:"${projectDir}/src/main/java", 
					superPkg:"ish.oncourse.cayenne.glue",
					template:"${projectDir}/../common/src/main/resources/cayenne/dotemplates/client-subclass-serverside.vm",
					superTemplate:"${projectDir}/../common/src/main/resources/cayenne/dotemplates/client-superclass-serverside.vm",
					makepairs:"true",
					client:"true",
					mode:"all")
	}
}

project.ext.freebsdAppFiles = copySpec {
	into('.') {
		from("${projectDir}/src/packaging/freebsd/")
		include ("*")

		from("${libsDir}/${project.name}-${version}-all.jar")
	}
}

project.ext.unixAppFiles = copySpec {
	into('.') {
		from("${projectDir}/src/packaging/unix/")
		include ("*")

		from("${libsDir}/${project.name}-${version}-all.jar")
	}
}

task installer_freebsd(dependsOn: jarAll, type: Copy) {
	description "Create the FreeBSD package (installer)."
	doFirst {
		logger.lifecycle("Creating the freebsd application executable for $project.name")
	}
	
	with freebsdAppFiles
	into file("${distsDir}/freebsd")

	doLast {
		ant.replace(file: "${distsDir}/freebsd/+COMMENT", 		token: "@version@", 			value: "${project.version}")
		ant.replace(file: "${distsDir}/freebsd/+CONTENTS", 		token: "@version@", 			value: "${project.version}")
		ant.replace(file: "${distsDir}/freebsd/+CONTENTS", 		token: "@project.name@", 		value: "${project.name}")
		ant.replace(file: "${distsDir}/freebsd/+DISPLAY", 		token: "@maxmemoryServer64@", 	value: "${project.maxmemoryServer64}")
		ant.replace(file: "${distsDir}/freebsd/onCourseServer", token: "@version@", 			value: "${project.version}")
		ant.replace(file: "${distsDir}/freebsd/onCourseServer", token: "@project.name@", 		value: "${project.name}")
		ant.replace(file: "${distsDir}/freebsd/onCourseServer", token: "@maxmemoryServer64@", 	value: "${project.maxmemoryServer64}")

		logger.lifecycle("Calculating checksums for the $project.name freebsd application executable")
		ant.checksum(file:"${distsDir}/freebsd/+COMMENT", 										property: "hash_comment")
		ant.checksum(file:"${distsDir}/freebsd/+DESC", 											property: "hash_desc")
		ant.checksum(file:"${distsDir}/freebsd/+DISPLAY", 										property: "hash_display")
		ant.checksum(file:"${distsDir}/freebsd/${project.name}-${project.version}-all.jar", 	property: "hash_onCourseServerJar")
		ant.checksum(file:"${distsDir}/freebsd/onCourseServer", 								property: "hash_onCourseServer")

		ant.replace(file: "${distsDir}/freebsd/+CONTENTS", token: "@hash_onCourseServerJar@", 	value: "${ant.hash_onCourseServerJar}")
		ant.replace(file: "${distsDir}/freebsd/+CONTENTS", token: "@hash_onCourseServer@", 		value: "${ant.hash_onCourseServer}")
		ant.replace(file: "${distsDir}/freebsd/+CONTENTS", token: "@hash_comment@", 			value: "${ant.hash_comment}")
		ant.replace(file: "${distsDir}/freebsd/+CONTENTS", token: "@hash_desc@", 				value: "${ant.hash_desc}")
		ant.replace(file: "${distsDir}/freebsd/+CONTENTS", token: "@hash_display@", 			value: "${ant.hash_display}")

		ant.tar(basedir:"${distsDir}/freebsd/", destfile:"${distsDir}/freebsd/onCourseServer.tar")
		ant.gzip(zipfile: "${distsDir}/freebsd/onCourseServer.tgz", src:"${distsDir}/freebsd/onCourseServer.tar")

		delete freebsdAppFiles
		delete "${distsDir}/freebsd/onCourseServer.tar"
	}	
} 

task installer_unix(dependsOn: jarAll, type: Copy) {
	description "Create the Unix/Linux package (zip)."
	doFirst {
		logger.lifecycle("Creating the unix application executable for $project.name")
	}
	with unixAppFiles
	into file("${distsDir}/unix")
	doLast {
		ant.replace(file: "${distsDir}/unix/onCourseServer.sh", token: "@version@", 			value: "${project.version}")
		ant.replace(file: "${distsDir}/unix/onCourseServer.sh", token: "@project.name@", 		value: "${project.name}")
		ant.replace(file: "${distsDir}/unix/onCourseServer.sh", token: "@maxmemoryServer64@", 	value: "${project.maxmemoryServer64}")

		ant.tar(basedir: "${distsDir}/unix/", destfile: "${distsDir}/unix/onCourseServer.tar")
		ant.gzip(zipfile: "${distsDir}/unix/onCourseServer.tar.gz", src:"${distsDir}/unix/onCourseServer.tar")

		delete unixAppFiles
		delete "${distsDir}/unix/onCourseServer.tar"
	}
}

task installer_win(dependsOn: bundle_win, type: Nsis) {
	inputFile = file("${distsDir}/windows/onCourseServer.exe")
	outputFileName = "onCourseServer-installer.exe"
}