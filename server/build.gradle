apply plugin: 'macAppBundle'
apply plugin: 'cayenne'

dependencies {
	def jettyVersion = '8.1.7.v20120910'

	compile project(':common')
	compile project(':webservices-client')

	compile 'org.apache.cayenne:cayenne-lifecycle:3.1-beta.r1443526'

	compile 'foxtrot:foxtrot-core:4.0'

	compile "org.eclipse.jetty:jetty-servlet:$jettyVersion"
	compile "org.eclipse.jetty:jetty-servlets:$jettyVersion"

	compile 'org.apache.derby:derbyclient:10.9.1.0'
	compile 'org.apache.derby:derbynet:10.9.1.0'
	compile 'org.liquibase:liquibase-core:2.0.5'
	
	compile 'net.sourceforge.jtds:jtds:1.2.7'
	// jtds 1.3 is not compatible with java 6
	//compile 'net.sourceforge.jtds:jtds:1.3.0'
	compile 'mysql:mysql-connector-java:5.1.23'
	compile 'net.sf.saxon:Saxon-HE:9.4.0.6'
	compile 'org.quartz-scheduler:quartz:2.1.6'
	compile 'org.slf4j:slf4j-log4j12:1.7.2'

    compile ('net.sf.jasperreports:jasperreports:5.0.1') {
        exclude group: 'org.apache.poi', module: 'poi-ooxml'

        //excluding the following, because they aren't correctly defined inside dependencies, causing duplicate jars to be added to the project
        exclude group: 'bouncycastle', module: 'bcmail-jdk14'
        exclude group: 'bouncycastle', module: 'bcprov-jdk14'
        exclude group: 'bouncycastle', module: 'bctsp-jdk14'
    }

    compile ('org.bouncycastle:bctsp-jdk14:1.46') {
    	exclude group: 'org.bouncycastle', module: 'bcmail-jdk14'
    }

	testCompile 'org.mockito:mockito-core:1.9.5'
	testCompile 'org.apache.derby:derbytools:10.9.1.0'
	testCompile "org.eclipse.jetty:test-jetty-servlet:$jettyVersion"
	testCompile 'dbunit:dbunit:2.4.8'
	testCompile 'org.reflections:reflections:0.9.8'
	testCompile 'commons-dbcp:commons-dbcp:1.4'
}

jar {
	manifest {
		from sharedManifest
		attributes 'Main-Class': 'ish.oncourse.server.AngelServer'
	}
}

sourceSets {
  main {
	// generate some manifest files for lists of resources to find at runtime
	output.dir("$buildDir/generated-resources/main", builtBy: 'createResourceManifests')
  }
}

task createResourceManifests {
	doLast {
		def sources = ["resources/schema/referenceData/exportTemplates", "resources/schema/referenceData/reports"]
		sources.each { s -> 
			def exportManifest = new File("$buildDir/generated-resources/main/$s", "manifest")
			exportManifest.getParentFile().mkdirs()
			exportManifest.write("")

			FileTree tree = fileTree(dir: "src/main/resources/$s")
			tree.exclude(".DS_Store")
			tree.visit {element ->
				if (!element.isDirectory()) exportManifest.append("$s/$element.relativePath\n")
			}
		}
	}
}

task run(dependsOn: [classes, processResources], type: JavaExec) {
	main = 'ish.oncourse.server.AngelServer'
	classpath = sourceSets.main.runtimeClasspath
	args 'DEBUG=true'
	jvmArgs '-Xmx1024m', '-XX:MaxPermSize=128M', '-XX:+HeapDumpOnOutOfMemoryError'
}

test {
	dbTests = project.hasProperty('database') ? project.database : "derby-test"

	logger.lifecycle("will run tests in '"+dbTests+"' mode")

	switch (dbTests) {
		case "derby-test":
			systemProperty 'testDatabaseUri', testDatabaseUriDerby
			exclude '**/db/Mysql*.class'
			exclude '**/db/Mssql*.class'
			break

		case "mssql-test":
			assert project.hasProperty('testDatabaseUriMssql') // Please provide the testDatabaseUriMssql in your ~/.gradle/gradle.properties file
			systemProperty 'testDatabaseUri', testDatabaseUriMssql
			exclude '**/db/Mysql*.class'
			exclude '**/db/Derby*.class'
			break

		case "mysql-test":
			assert project.hasProperty('testDatabaseUriMysql') // Please provide the testDatabaseUriMysql in your ~/.gradle/gradle.properties file
			systemProperty 'testDatabaseUri', testDatabaseUriMysql
			exclude '**/db/Mssql*.class'
			exclude '**/db/Derby*.class'
			break
	}
}

cayenne {
	cayenneMap = file ("${projectDir}/../common/src/main/resources/cayenne/AngelMap.map.xml")
	superPkg = "ish.oncourse.cayenne.glue"
	serverSuperPkg = "ish.oncourse.server.cayenne.glue"
	templateDir = file ("${projectDir}/../common/src/main/resources/cayenne/dotemplates/")
	type = 'server'
	destDir = file ("${projectDir}/src/main/java")
}

macAppBundle {
	appOutputDir = 'distributions/macosx'
	//dmgOutputDir = 'distributions/macosx'
	creatorCode = "ishS"
	backgroundImage = "${projectDir}/src/packaging/macosx/dmg.background.png"
	mainClassName = "ish.oncourse.server.AngelServer"
	appName = "onCourseServer"
	volumeName = "onCourseServer"
	dmgName = "onCourseServer"
	bundleExecutable = 'onCourseServer'
	bundleAllowMixedLocalizations = false
	icon = "${projectDir}/src/packaging/macosx/onCourseServer.icns"
	jvmVersion = "${sourceCompatibility}+"
	
	if (project.hasProperty('osxKeychainPassword')) {
		certIdentity = project.osxKeychainIdentity
    	keyChain = project.osxKeychain
    }
	
	//java properties
	javaProperties.put("apple.awt.textantialiasing", "true")
	javaProperties.put("JFileChooser.appBundleIsTraversable", "true")
	javaProperties.put("JFileChooser.packageIsTraversable", "true")    
	javaProperties.put("apple.awt.antialiasing", "true")    
	javaProperties.put("apple.awt.showGrowBox", "true") 

	javaExtras.put("VMOptions", "-Xmx"+"${project.maxmemoryServer}" + " -XX:MaxPermSize=" + "${project.maxpermgenServer}")

	def Map dict = new HashMap();
	dict.put ("CFBundleTypeName", "onCourse server data file")
	dict.put ("CFBundleTypeRole", "Editor")
	dict.put ("CFBundleTypeIconFile", "onCourseDocument.icns")
	dict.put ("CFBundleTypeExtensions", ["iocdata"])
	dict.put ("CFBundleTypeOSTypes", ["ishS"])
	dict.put ("LSTypeIsPackage", "true")

	bundleExtras.put("CFBundleDocumentTypes", [dict])

}


task bundle_osx(dependsOn: createApp) {
	description "Create the OSX application executable."
	doFirst {
		logger.lifecycle("Creating the OSX application executable for $project.name")
	}
}

codeSign.dependsOn(prepareKeychains)

task installer_osx(dependsOn: [codeSign, createDmg]) {
	description "Create the OSX installer (which is just a dmg file)."
	doFirst {
		logger.lifecycle("Creating the OSX installer (which is just a dmg file) for $project.name")
	}
}

project.ext.freebsdAppFiles = copySpec {
	into('.') {
		from("${projectDir}/src/packaging/freebsd/+MANIFEST")
	}
	into('usr/local/onCourse') {
		from("${libsDir}/${project.name}-${version}-all.jar")
	}
	into('usr/local/etc/rc.d') {
		from("${projectDir}/src/packaging/freebsd/onCourseServer")
	}
}

project.ext.unixAppFiles = copySpec {
	into('.') {
		from("${projectDir}/src/packaging/unix/")
		include ("*")

		from("${libsDir}/${project.name}-${version}-all.jar")
	}
}

task bundle_win(dependsOn: fatJar, type: au.com.ish.Exe4JTask) {
	configFile = file("${projectDir}/src/packaging/windows/server.exe4j.xml")
	jarFile = file("${libsDir}/${project.name}-${project.version}-all.jar")
	resourceFiles = files("${projectDir}/src/packaging/windows/onCourseServer.ico")
	exeFile = file("${distsDir}/windows/onCourseServer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task bundle_winService(dependsOn: fatJar, type: au.com.ish.Exe4JTask) {
	configFile = file("${projectDir}/src/packaging/windows/service.exe4j.xml")
	jarFile = file("${libsDir}/${project.name}-${project.version}-all.jar")
	resourceFiles = files("${projectDir}/src/packaging/windows/onCourseServer.ico")
	exeFile = file("${distsDir}/windows/onCourseService.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task bundle_winService64(dependsOn: fatJar, type: au.com.ish.Exe4JTask) {
	configFile = file("${projectDir}/src/packaging/windows/service64.exe4j.xml")
	jarFile = file("${libsDir}/${project.name}-${project.version}-all.jar")
	resourceFiles = files("${projectDir}/src/packaging/windows/onCourseServer.ico")
	exeFile = file("${distsDir}/windows/onCourseService64.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task installer_freebsd(dependsOn: fatJar, type: Copy) {
	description "Create the FreeBSD package (installer)."
	doFirst {
		logger.lifecycle("Creating the freebsd application executable for $project.name.")
	}
	
	with freebsdAppFiles
	into file("${distsDir}/freebsd")

	doLast {
		jarFile = "${distsDir}/freebsd/usr/local/onCourse/${project.name}-${project.version}-all.jar"
		manifestFile = "${distsDir}/freebsd/+MANIFEST"
		scriptFile = "${distsDir}/freebsd/usr/local/etc/rc.d/onCourseServer"

		logger.lifecycle("Calculating checksums for the $project.name freebsd application executable")
		ant.length(file: jarFile, property: 'size_onCourseServerJar')

		ant.replace(file: scriptFile, token: "@version@", value: "${project.version}")
		ant.replace(file: scriptFile, token: "@project.name@", value: "${project.name}")
		ant.replace(file: scriptFile, token: "@maxmemoryServer64@", value: "${project.maxmemoryServer64}")

		ant.replace(file: manifestFile, token: "@version@", value: "${project.version}")
		ant.replace(file: manifestFile, token: "@size_onCourseServerJar@", value: "${ant.size_onCourseServerJar}")
		ant.replace(file: manifestFile, token: "@hash_onCourseServerJar@", value: sha256(jarFile) )
		ant.replace(file: manifestFile, token: "@hash_onCourseServer@", value: sha256(scriptFile) )

		ant.tar(basedir:"${distsDir}/freebsd/", destfile:"${distsDir}/onCourseServer.tar")
		xzCompress("${distsDir}/onCourseServer.tar", "${distsDir}/onCourseServer.txz")

		delete "${distsDir}/onCourseServer.tar"
		delete "${distsDir}/freebsd"
	}	
} 

task installer_unix(dependsOn: fatJar, type: Copy) {
	description "Create the Unix/Linux package (zip)."
	doFirst {
		logger.lifecycle("Creating the unix application executable for $project.name")
	}
	with unixAppFiles
	into file("${distsDir}/unix")
	doLast {
		ant.replace(file: "${distsDir}/unix/onCourseServer.sh", token: "@version@", 			value: "${project.version}")
		ant.replace(file: "${distsDir}/unix/onCourseServer.sh", token: "@project.name@", 		value: "${project.name}")
		ant.replace(file: "${distsDir}/unix/onCourseServer.sh", token: "@maxmemoryServer64@", 	value: "${project.maxmemoryServer64}")

		ant.tar(basedir: "${distsDir}/unix/", destfile: "${distsDir}/unix/onCourseServer.tar")
		ant.gzip(zipfile: "${distsDir}/unix/onCourseServer.tar.gz", src:"${distsDir}/unix/onCourseServer.tar")

		delete unixAppFiles
		delete "${distsDir}/unix/onCourseServer.tar"
	}
}

task installer_win(dependsOn: [bundle_win, prepareKeychains], type: au.com.ish.NsisTask) {
	exeFile = file("${distsDir}/windows/onCourseServer.exe")
	resourceFolder = file("${projectDir}/src/packaging/windows")
	nsiFileName = "server-mui.nsi"
	outputFile = file("${distsDir}/windows/onCourseServer-installer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task installer_winService(dependsOn: [bundle_winService, prepareKeychains], type: au.com.ish.NsisTask) {
	exeFile = file("${distsDir}/windows/onCourseService.exe")
	resourceFolder = file("${projectDir}/src/packaging/windows")
	nsiFileName = "service-mui.nsi"
	outputFile = file("${distsDir}/windows/onCourseService-installer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task installer_winService64(dependsOn: [bundle_winService64, prepareKeychains], type: au.com.ish.NsisTask) {
	exeFile = file("${distsDir}/windows/onCourseService64.exe")
	resourceFolder = file("${projectDir}/src/packaging/windows")
	nsiFileName = "service64-mui.nsi"
	outputFile = file("${distsDir}/windows/onCourseService64-installer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

String sha256(String filename) {
	if (! file(filename).exists()) return "missing file"

	new ByteArrayOutputStream().withStream { result ->
		def e = exec {
			executable = 'shasum' // this is only going to work on OSX
			args = ['-a', '256', filename]
			standardOutput = result
		}
		return result.toString().split()[0]
	}
}

void xzCompress(String input, String output) {
	def p1 = "xz -9 $input".execute()
	p1.waitFor()
	def p2 = ("mv $input" + ".xz $output").execute()
	p2.waitFor()
}