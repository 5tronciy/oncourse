import au.com.ish.Aql
import au.com.ish.DmgTask
import au.com.ish.Exe4JTask
import au.com.ish.NsisTask
import com.github.psxpaul.task.JavaExecFork
import org.gradle.api.internal.artifacts.publish.DefaultPublishArtifact

apply plugin: 'groovy'
apply plugin: 'apidoc'
apply plugin: 'org.apache.cayenne'

apply from: "$rootDir/gradle/bootique.gradle"
apply plugin: 'com.github.psxpaul.execfork'

sourceCompatibility = 11
targetCompatibility = 11

configurations {
	javaAgent
	apidocSource
	aql

	// exclude these here since they are pulled in in various ways
	all*.exclude group: "org.slf4j", module: "slf4j-simple"
	all*.exclude module: "hessian"
}

// compile everything with the groovy plugin which can handle mixed groovy and Java files
sourceSets {
	main {
		// generate some manifest files for lists of resources to find at runtime
		output.dir("$buildDir/generated-resources/main", builtBy: 'createResourceManifests')
		groovy {
			srcDirs += 'src/main/java'
			srcDirs += 'src/main/groovy'
			srcDirs += "$buildDir/antlr/java"
			srcDirs += "${buildDir}/generated-resources/main/java"
		}
		java {
			srcDirs = []
		}
	}
	test {
		groovy {
			srcDirs += 'src/main/java'
			srcDirs += 'src/main/groovy'
		}

	}
}

dependencies {

	implementation project(':server-api')
	implementation project(':common')

	implementation ("org.apache.cxf:cxf-rt-frontend-jaxws:$cfxVersion") {
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-javamail_1.4_spec'
	}

	implementation ("ish.oncourse.willow:webservices-client:$waCommonWebservicesClientVersion") {
		exclude group: 'org.apache.cayenne', module: 'cayenne-server'

		exclude group: 'org.apache.cxf'

		exclude group: 'javax.xml.soap'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-ws-metadata_2.0_spec'

		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-stax-api_1.0_spec'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jaxws_2.2_spec'
		exclude group: 'antlr'
		exclude group: 'org.apache.xmlbeans'

		exclude group: 'javax.xml.bind'

		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-activation_1.1_spec'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-annotation_1.0_spec'
		exclude group: 'org.eclipse.jetty'

		exclude group: 'org.slf4j'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-servlet_2.5_spec'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jms_1.1_spec'
		exclude group: 'aopalliance'
		exclude group: 'org.springframework'

		exclude group: 'com.sun.xml.messaging.saaj'
		exclude group: 'org.jvnet.mimepull'
		exclude group: 'rhino'
		exclude group: 'javax.ws.rs'
		exclude group: 'net.oauth.core'
		exclude group: 'net.sf.ehcache'
		exclude group: 'org.apache.ws.security'

		exclude group: 'org.opensaml'
		exclude group: 'org.apache.santuario'

		exclude group: 'joda-time'
		exclude group: 'commons-logging'
		exclude group: 'xalan'

		exclude group: 'org.codehaus.groovy'
	}

	implementation "org.apache.cayenne:cayenne-lifecycle:$cayenneVersion"
	implementation ("org.apache.cayenne:cayenne-rop-server:$cayenneVersion") {
		exclude group: "org.slf4"
	}

	implementation "org.apache.cayenne:cayenne-protostuff:$cayenneVersion"
	implementation "org.apache.cayenne:cayenne-commitlog:$cayenneVersion"

	implementation "org.eclipse.jetty:jetty-servlet:$jettyVersion"

	implementation "org.eclipse.jetty:jetty-servlets:$jettyVersion"
	implementation "org.eclipse.jetty.http2:http2-server:$jettyVersion"
	implementation "org.eclipse.jetty.websocket:websocket-servlet:$jettyVersion"
	implementation "org.eclipse.jetty.websocket:websocket-server:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-alpn-java-server:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-alpn-openjdk8-server:$jettyVersion"

	implementation 'org.eclipse.jetty.alpn:alpn-api:1.1.3.v20160715'

	implementation 'com.nulab-inc:zxcvbn:1.2.5'

	implementation "org.apache.derby:derbyclient:$derbyVersion"
	implementation "org.apache.derby:derbynet:$derbyVersion"
	implementation "org.apache.derby:derbytools:$derbyVersion"
	implementation "org.apache.derby:derbyshared:$derbyVersion"

	implementation ("org.liquibase:liquibase-maven-plugin:3.6.3") {
		exclude group: "ch.qos.logback"
	}

	implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: mariadbVersion

	implementation 'commons-lang:commons-lang:2.6' // this exists only to support some old reports. To be removed when all reports upgraded.
	implementation ('net.sf.jasperreports:jasperreports:6.1.1') {
		exclude group: 'org.apache.poi', module: 'poi-ooxml'

		exclude group:'org.codehaus.castor'
		exclude group:'com.fasterxml.jackson.core'
		exclude group:'org.apache.lucene'
		exclude group:'org.olap4j'
		exclude group: 'bouncycastle'
	}

	implementation "org.bouncycastle:bcprov-jdk15on:$bouncycastleVersion"
	implementation "org.bouncycastle:bcmail-jdk15on:$bouncycastleVersion"

	implementation "org.codehaus.groovy:groovy-all:$groovyVersion"
	implementation "org.codehaus.groovy:groovy-dateutil:$groovyVersion"
	implementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
	implementation 'oauth.signpost:signpost-commonshttp4:1.2.1.2'

	implementation 'com.warrenstrange:googleauth:0.4.5'
	implementation 'net.glxn.qrgen:javase:2.0'

	implementation 'net.sf.supercsv:super-csv:2.4.0'
	implementation 'net.sf.supercsv:super-csv-java8:2.4.0'

	// Needed for log4j to json or gelf formats
	implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"

	implementation 'org.yaml:snakeyaml:+'
	implementation "org.antlr:antlr4-runtime:4.7.1"

	// WSDL SOAP helpers for our integrations
	implementation 'com.github.groovy-wslite:groovy-wslite:1.1.3'

	implementation group: 'com.sun.xml.ws', name: 'jaxws-ri', version: '2.3.2'

	testImplementation "org.apache.cayenne:cayenne-dbsync:$cayenneVersion"
	testImplementation 'org.mockito:mockito-core:2.18.3'
	testImplementation "org.apache.derby:derbytools:$derbyVersion"
	testImplementation 'commons-dbcp:commons-dbcp:1.4'
	testImplementation 'xmlunit:xmlunit:1.6' //used for xml export validation tests
	testImplementation 'org.kohsuke:wordnet-random-name:1.3'
	testImplementation "io.bootique:bootique-test:$bootiqueVersion"
	testImplementation "org.testng:testng:6.13.1"
}
configurations.all {
	resolutionStrategy {
		// this is the last MPL version of iText, so we can't go past this
		forcedModules = ['com.lowagie:itext:2.1.7.js2']
	}
}

compileGroovy.groovyOptions.configurationScript = file("${rootDir}/gradle/groovyConfig.groovy")

jar {
	manifest {
		from sharedManifest
		attributes 'Main-Class': 'ish.oncourse.server.AngelServer'
		attributes 'Class-Path': configurations.runtimeClasspath.collect { "lib/" + it.name }.join(' ')
	}
}

dependencies {
	apidocSource "ish.oncourse.willow:waCommon:$waCommonWebservicesClientVersion:sources"
}

task createResourceManifests {
	doLast {
		def sources = ["resources/oncourse-scripts/export",
					   "resources/oncourse-scripts/import",
					   "resources/oncourse-scripts/reports",
					   "resources/oncourse-scripts/scripts",
					   "resources/oncourse-scripts/email"]
		sources.each { s ->
			def exportManifest = new File("$buildDir/generated-resources/main/$s", "manifest")
			exportManifest.getParentFile().mkdirs()
			exportManifest.write("")

			FileTree tree = fileTree(dir: "src/main/resources/$s", includes: ['**/*.jrxml', '**/*.properties', '**/*.yaml', '**/*.yml'])
			tree.visit {element ->
				if (!element.isDirectory()) exportManifest.append("$s/$element.relativePath\n")
			}
		}
	}
}

test.dependsOn(createResourceManifests)

test {
	// the database tests interfere with each other if run in parallel
	maxParallelForks = 1

//	default database for running test is mysql
	ext.dbTests = project.hasProperty('database') ? project.database : "mysql-test"

	logger.lifecycle("will run tests in '${dbTests}' mode")

	switch (dbTests) {
		case "derby-test":
			systemProperty 'databaseType', 'derby'
			exclude '**/db/Mysql*.class'
			exclude '**/db/Mssql*.class'
			break

		case "mssql-test":
			systemProperty 'databaseType', 'mssql'
			exclude '**/db/Mysql*.class'
			exclude '**/db/Derby*.class'
			break

		case "mysql-test":
			systemProperty 'databaseType', 'mysql'
			exclude '**/db/Mssql*.class'
			exclude '**/db/Derby*.class'
			break
	}
}

task copyTestDb(type: Copy) {
    from("$rootDir/api-test/src/test/resources/") {
        include 'onCourse.cfg'
    }
    into "$buildDir/"

    from zipTree(file("$rootDir/api-test/src/test/resources/onCourse.iocdata.zip"))
    into "$buildDir/"
}
task startDaemon(dependsOn: [classes, processResources], type: JavaExecFork) {
	classpath = sourceSets.main.runtimeClasspath
	main = 'ish.oncourse.server.AngelServer'
	args = ['DEBUG=true', 'REPLICATION_DISABLED=true']
	jvmArgs = ['-Xmx1024m', '-XX:+HeapDumpOnOutOfMemoryError', "-DdisableReplication=true"]
	workingDir = "$buildDir"
    waitForOutput = 'Server ready for client connections'
	timeout = 60 * 20
}

task run(dependsOn: [classes], type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'ish.oncourse.server.AngelServer'
    args = ['DEBUG=true', 'REPLICATION_DISABLED=true', 'disableReplication=true']
    jvmArgs = ['-Xmx1024m', '-XX:+HeapDumpOnOutOfMemoryError']
}

appBundler {
	distributionPath = "${buildDir}/distributions/"
	appName = "onCourseServer"
	appFile = file("${distributionPath}/${appName}.app")
	dmgFile = file("${distributionPath}/${appName}.dmg")
	appIdentifier = "ish.oncourse"
	mainClassName = "ish.oncourse.server.AngelServer"
	iconFile = new File(projectDir, "src/packaging/macosx/onCourseServer.icns")
	jars = configurations.runtimeClasspath + configurations.archives
	keychain = project.osxKeychain
	certIdentity = project.osxKeychainIdentity
	notarizeAccount = project.notarizeAccount
	notarizePassword = project.notarizePassword

	docExtensions = "iocdata"
	docIsPackage = "true"
	docIconFile =  new File(projectDir, "src/packaging/macosx/onCourseDocument.icns")
	docTypeRole = "Editor"
	docTypeName = "onCourse server data file"

	jvmOptions = [
			"-Dapple.awt.textantialiasing=true",
			"-DJFileChooser.appBundleIsTraversable=true",
			"-DJFileChooser.packageIsTraversable=true",
			"-Dapple.awt.antialiasing=true",
			"-Dapple.awt.showGrowBox=true",
			"-Djava.locale.providers=COMPAT,SPI",
			"-Xmx${project.maxmemoryServer}"
	]
}

task installer_osx(dependsOn: [codeSign, appBundle], type: DmgTask) {
	description "Create the OSX application executable and installer (which is just a dmg file)."
}

task bundle_win(dependsOn: [jar], type: Exe4JTask) {
	configFile = file("${projectDir}/src/packaging/windows/server.exe4j.xml")
	jars = configurations.runtimeClasspath + configurations.runtime.artifacts.files
	resourceFiles = files("${projectDir}/src/packaging/windows/onCourseServer.ico")
	exeFile = file("${buildDir}/distributions/windows/onCourseServer.exe")
	configExpandParams = [maxmemoryServer : project.maxmemoryServer]
	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword = project.codeSigningTemporaryPassword
	}
}

task bundle_winService(dependsOn: [jar], type: Exe4JTask) {
	configFile = file("${projectDir}/src/packaging/windows/service.exe4j.xml")
	jars = configurations.runtimeClasspath + configurations.runtime.artifacts.files
	resourceFiles = files("${projectDir}/src/packaging/windows/onCourseServer.ico")
	exeFile = file("${buildDir}/distributions/windows/onCourseService.exe")
	configExpandParams = [maxmemoryServer : project.maxmemoryServer]
	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword = project.codeSigningTemporaryPassword
	}
}

task bundle_winService64(dependsOn: [jar], type: Exe4JTask) {
	configFile = file("${projectDir}/src/packaging/windows/service64.exe4j.xml")
	jars = configurations.runtimeClasspath + configurations.runtime.artifacts.files
	resourceFiles = files("${projectDir}/src/packaging/windows/onCourseServer.ico")
	exeFile = file("${buildDir}/distributions/windows/onCourseService64.exe")
	configExpandParams = [maxmemoryServer64 : project.maxmemoryServer64]
	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword = project.codeSigningTemporaryPassword
	}
}

task installer_unix(dependsOn: [jar], type: Zip) {
	description "Create the Unix/Linux package (zip)."
	doFirst {
		logger.lifecycle("Creating the unix application executable for ${project.name}")
	}

	from (configurations.runtimeClasspath) {
		into 'onCourseServer/lib'
	}
	from (configurations.runtime.artifacts.files) {
		into 'onCourseServer'
	}
	from (file("src/packaging/unix/")) {
		into 'onCourseServer'
	}

	archiveName 'onCourseServer.zip'
	destinationDir file("${buildDir}/distributions/unix")
}

task installer_win(dependsOn: [bundle_win], type: NsisTask) {
	exeFile = file("${buildDir}/distributions/windows/onCourseServer.exe")
	resourceFolder = file("${projectDir}/src/packaging/windows")
	nsiFileName = "server-mui.nsi"
	outputFile = file("${buildDir}/distributions/windows/onCourseServer-installer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task installer_winService(dependsOn: [bundle_winService], type: NsisTask) {
	exeFile = file("${buildDir}/distributions/windows/onCourseService.exe")
	resourceFolder = file("${projectDir}/src/packaging/windows")
	nsiFileName = "service-mui.nsi"
	outputFile = file("${buildDir}/distributions/windows/onCourseService-installer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task installer_winService64(dependsOn: [bundle_winService64], type: NsisTask) {
	exeFile = file("${buildDir}/distributions/windows/onCourseService64.exe")
	resourceFolder = file("${projectDir}/src/packaging/windows")
	nsiFileName = "service64-mui.nsi"
	outputFile = file("${buildDir}/distributions/windows/onCourseService64-installer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

//
// Documentation
//

task generateApiDoc (type: SwaggerDoc) {
	schema = file("${rootDir}/server-api/src/main/resources/server-api.yaml")
	docOutput = file("${buildDir}/doc")
}

task packageApiDoc (type: Zip, dependsOn: generateApiDoc) {
	from file("${buildDir}/doc/docs")
	archiveClassifier = 'documentation'
}

apiDocs {
	source = sourceSets.main.groovy.plus(zipTree(configurations.apidocSource.find { it.name.startsWith("waCommon") }))
	destinationDir = file("${buildDir}/distributions/apidoc")
}

task apidocsBundle(type: Zip) {
	from file("${buildDir}/distributions/apidoc")
	archiveClassifier = 'documentation'
	archiveBaseName = "dsl"
	dependsOn tasks.getByName('apiDocs')
}


// "gradlew publishToMavenLocal" if you want to publish this to your local .m2 folder
publishing {
	publications {
		apidocs(MavenPublication) {
			artifact (apidocsBundle) {
				artifactId "apidocs"
			}
		}
		docs(MavenPublication) {
			artifact(packageApiDoc) {
				artifactId "docs"
			}
		}
		executables(MavenPublication) {
			artifact(installer_unix) {
				version (project.hasProperty('releaseVersion') ? project.releaseVersion : "SNAPSHOT")
				classifier "unix"
				extension "zip"
			}
			artifact(new DefaultPublishArtifact("onCourseServer-installer", "exe", "exe", null, null,
					file("${buildDir}/distributions/windows/onCourseServer-installer.exe")).builtBy(installer_win)) {
				version (project.hasProperty('releaseVersion') ? project.releaseVersion : "SNAPSHOT")
				classifier "windows"
				extension "exe"
			}
			artifact(new DefaultPublishArtifact("onCourseService64-installer", "exe", "exe", null, null,
					file("${buildDir}/distributions/windows/onCourseService64-installer.exe")).builtBy(installer_winService64)) {
				version (project.hasProperty('releaseVersion') ? project.releaseVersion : "SNAPSHOT")
				classifier "winService"
				extension "exe"
			}

			artifact(new DefaultPublishArtifact("onCourseServer", "dmg", "dmg", null, null,
					file("${buildDir}/distributions/onCourseServer.dmg")).builtBy(createDMG)) {
				version (project.hasProperty('releaseVersion') ? project.releaseVersion : "SNAPSHOT")
				classifier "osx"
				extension "dmg"
			}
		}
	}
}

String sha256(String filename) {
	if (! file(filename).exists()) return "missing file"

	new ByteArrayOutputStream().withStream { result ->
		exec {
			executable = 'shasum' // this is only going to work on OSX
			args = ['-a', '256', filename]
			standardOutput = result
		}
		return result.toString().split()[0]
	}
}

task queryGrammar(type: Aql) {
	outputDir = file("${buildDir}/antlr/java/ish/oncourse/aql/impl")
	packageDir = 'ish.oncourse.aql.impl'
	target = 'Java'
}

cayenne.defaultDataMap "${rootDir}/common/src/main/resources/cayenne/AngelMap.map.xml"

task clientCgen(type: cayenne.cgen) {
	client = true
	makePairs = true
	createPropertyNames = true
	template = "${rootDir}/common/src/main/resources/cayenne/dotemplates/client-subclass-serverside.vm"
	superTemplate = "${rootDir}/common/src/main/resources/cayenne/dotemplates/client-superclass-serverside.vm"
	mode = 'entity'
	superPkg = 'ish.oncourse.cayenne.glue'
	destDir = file ("${buildDir}/generated-resources/main/java")
	force = true
	doLast {
		delete fileTree("${buildDir}/generated-resources/main/java/ish/oncourse/cayenne").matching {
			exclude '**/glue/*'
		}
	}
}

task serverCgen(type: cayenne.cgen) {
	client = false
	makePairs = true
	createPropertyNames = true
	template = "${rootDir}/common/src/main/resources/cayenne/dotemplates/subclass.vm"
	superTemplate = "${rootDir}/common/src/main/resources/cayenne/dotemplates/superclass.vm"
	mode = 'entity'
	superPkg = 'ish.oncourse.server.cayenne.glue'
	destDir = file ("${buildDir}/generated-resources/main/java")
	force = true
	doLast {
		delete fileTree("${buildDir}/generated-resources/main/java/ish/oncourse/server/cayenne") {
			exclude '**/glue/*'
		}
	}
}

compileJava {
	dependsOn queryGrammar, clientCgen, serverCgen
}
processResources {
	dependsOn ':client-html:build'
	doLast {
		copy {
			from('../client-html/build/assets') {
				include '**/*.*'
			}
			into 'build/resources/main/static'}
	}
}
