apply plugin: 'groovy'

apply from: "$rootDir/gradle/bootique.gradle"

// compile everything with the groovy plugin which can handle mixed groovy and Java files
sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDir 'src/main/java'
sourceSets.test.java.srcDirs = []
sourceSets.test.groovy.srcDir 'src/test/java'

dependencies {

	compile (project(':common')) {
		exclude group: 'org.bouncycastle'
	}

	// Needed by Java 9 and above
	compile 'javax.xml.bind:jaxb-api:2.3.0'
	compile 'javax.xml.ws:jaxws-api:2.3.0'
	compile 'javax.annotation:javax.annotation-api:1.3.1'

	compile ("ish.oncourse.willow:webservices-client:$waCommonWebservicesClientVersion") {
		exclude group: 'org.apache.cayenne', module: 'cayenne-server'

		exclude group: 'javax.xml.soap'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-ws-metadata_2.0_spec'

		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-stax-api_1.0_spec'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jaxws_2.2_spec'
		exclude group: 'antlr'
		exclude group: 'org.apache.xmlbeans'

		exclude group: 'javax.xml.bind'

		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-activation_1.1_spec'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-annotation_1.0_spec'
		exclude group: 'org.eclipse.jetty'

		exclude group: 'org.slf4j'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-servlet_2.5_spec'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jms_1.1_spec'
		exclude group: 'aopalliance'
		exclude group: 'org.springframework'

		exclude group: 'com.sun.xml.messaging.saaj'
		exclude group: 'org.jvnet.mimepull'
		exclude group: 'rhino'
		exclude group: 'javax.ws.rs'
		exclude group: 'net.oauth.core'
		exclude group: 'net.sf.ehcache'
		exclude group: 'org.apache.ws.security'

		exclude group: 'org.opensaml'
		exclude group: 'org.apache.santuario'

		exclude group: 'joda-time'
		exclude group: 'commons-logging'
		exclude group: 'xalan'

		exclude group: 'org.codehaus.groovy'
	}

	compile "org.apache.cayenne:cayenne-lifecycle:$cayenneVersion"
	compile "org.apache.cayenne:cayenne-protostuff:$cayenneVersion"
/*	compile "org.apache.cayenne:cayenne-java8:$cayenneVersion"

	compile "org.eclipse.jetty:jetty-servlet:$jettyVersion"
	compile "org.eclipse.jetty:jetty-servlets:$jettyVersion"
*/	compile "org.eclipse.jetty.http2:http2-server:$jettyVersion"

	compile "org.eclipse.jetty.websocket:websocket-servlet:$jettyVersion"
	compile "org.eclipse.jetty.websocket:websocket-server:$jettyVersion"
	compile "org.apache.derby:derbyclient:$derbyVersion"
	compile "org.apache.derby:derbynet:$derbyVersion"

	// can't go above 2.0.5 due to the bug in liquibase [https://liquibase.jira.com/browse/CORE-2265]
	compile 'org.liquibase:liquibase-core:2.0.5-fix'

	compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: mariadbVersion
/*	compile 'com.microsoft.sqlserver:mssql-jdbc:6.2.1.jre8'

	compile 'commons-lang:commons-lang:2.6' // this exists only to support some old reports. To be removed when all reports upgraded.
*/
	compile ('net.sf.jasperreports:jasperreports:6.1.1') {
		exclude group: 'org.apache.poi', module: 'poi-ooxml'

		exclude group:'org.codehaus.castor'
		exclude group:'com.fasterxml.jackson.core'
		exclude group:'org.apache.lucene'
		exclude group:'org.olap4j'
		exclude group: 'bouncycastle'
	}

	compile 'org.bouncycastle:bcprov-jdk15on:1.53'
	compile 'org.bouncycastle:bcmail-jdk15on:1.53'

	compile 'org.codehaus.groovy:groovy-all:2.5.0-beta-3'
	compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
	compile 'oauth.signpost:signpost-commonshttp4:1.2.1.2'

	compile 'com.warrenstrange:googleauth:0.4.5'
	compile 'net.glxn.qrgen:javase:2.0'

	compile 'net.sf.supercsv:super-csv:2.4.0'
	compile 'net.sf.supercsv:super-csv-java8:2.4.0'

	// Needed for log4j to json or gelf formats
	compile 'com.fasterxml.jackson.core:jackson-core:2.6.3'

	compile 'org.apache.activemq:activemq-broker:5.12.1'
	compile 'org.yaml:snakeyaml:+'
	compile ('org.apache.activemq:activemq-http:5.12.1') {
		exclude group: 'org.eclipse.jetty.aggregate'
	}

	testCompile "org.apache.cayenne:cayenne-dbsync:$cayenneVersion"
	testCompile 'org.mockito:mockito-core:1.10.19'
 	testCompile "org.apache.derby:derbytools:$derbyVersion"
	testCompile 'commons-dbcp:commons-dbcp:1.4'
	testCompile 'xmlunit:xmlunit:1.6' //used for xml export validation tests
	testCompile 'org.kohsuke:wordnet-random-name:1.3'
}

sourceSets {
  main {
	// generate some manifest files for lists of resources to find at runtime
	output.dir("$buildDir/generated-resources/main", builtBy: 'createResourceManifests')
  }
}

task createResourceManifests {
	doLast {
		def sources = ["resources/oncourse-scripts/export",
					   "resources/oncourse-scripts/import",
					   "resources/oncourse-scripts/reports",
					   "resources/oncourse-scripts/scripts",
					   "resources/oncourse-scripts/email"]
		sources.each { s ->
			def exportManifest = new File("$buildDir/generated-resources/main/$s", "manifest")
			exportManifest.getParentFile().mkdirs()
			exportManifest.write("")

			FileTree tree = fileTree(dir: "src/main/resources/$s", includes: ['**/*.jrxml', '**/*.properties'])
			tree.visit {element ->
				if (!element.isDirectory()) exportManifest.append("$s/$element.relativePath\n")
			}
		}
	}
}
test.dependsOn(createResourceManifests)

compileGroovy {
	//add missing library for Java 9
	groovyClasspath += classpath.filter { it.absolutePath.contains('jaxb-api') }
}


task switchReplicationVersion {
	doLast {
		FileTree serverFiles = fileTree(dir: 'src/main/java/ish/oncourse/server/replication/')
				.plus(fileTree(dir: 'src/test/java/ish/oncourse/server/replication/'))
				.plus(fileTree(dir: 'src/main/java/ish/oncourse/server/modules/'))
				.plus(fileTree(dir: 'src/test/java/ish/oncourse/server/upgrades/'))


		serverFiles.each { File serverFile ->
			print(serverFile.getName())
			String content = serverFile.getText()
			serverFile.write(content.readLines().collect { line -> line.startsWith("import") ? line.replaceAll(oldV, newV) : line }.join("\n").concat("\n"))
		}
		
		File resourcesFile = file("src/main/java/ish/oncourse/server/modules/SoapPortLocatorImpl.java")
		String resourcesContent = resourcesFile.getText()
		resourcesFile.write(resourcesContent.replaceAll("https://secure-payment.oncourse.net.au/services/${oldV}/replication", "https://secure-payment.oncourse.net.au/services/${newV}/replication")
											.replaceAll("https://secure-payment.oncourse.net.au/services/${oldV}/payment", "https://secure-payment.oncourse.net.au/services/${newV}/payment")
											.replaceAll("wsdl/${oldV}_replication.wsdl", "wsdl/${newV}_replication.wsdl"))
	}
}


String sha256(String filename) {
	if (! file(filename).exists()) return "missing file"

	new ByteArrayOutputStream().withStream { result ->
		def e = exec {
			executable = 'shasum' // this is only going to work on OSX
			args = ['-a', '256', filename]
			standardOutput = result
		}
		return result.toString().split()[0]
	}
}
