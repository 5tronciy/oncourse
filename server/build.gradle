apply plugin: 'cayenne'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'apidoc'

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDir 'src/main/java'


dependencies {
	// as of 29/10/2015 upgrading to anything from 9.3.0 up to 9.3.5 causes
	// intermittent SSL issues when establishing secure connection
	def jettyVersion = '9.2.13.v20150730'

	compile (project(':common')) {
		exclude group: 'org.bouncycastle'
	}

	compile ("ish.oncourse.willow:webservices-client:$waCommonWebservicesClientVersion") {

		exclude group: 'javax.xml.soap'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-ws-metadata_2.0_spec'

		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-stax-api_1.0_spec'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jaxws_2.2_spec'
		exclude group: 'antlr'
		exclude group: 'org.apache.xmlbeans'

		exclude group: 'javax.xml.bind'

		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-activation_1.1_spec'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-annotation_1.0_spec'
		exclude group: 'org.eclipse.jetty'

		exclude group: 'org.slf4j'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-servlet_2.5_spec'
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jms_1.1_spec'
		exclude group: 'aopalliance'
		exclude group: 'org.springframework'

		exclude group: 'com.sun.xml.messaging.saaj'
		exclude group: 'org.jvnet.mimepull'
		exclude group: 'rhino'
		exclude group: 'javax.ws.rs'
		exclude group: 'net.oauth.core'
		exclude group: 'net.sf.ehcache'
		exclude group: 'org.apache.ws.security'

		exclude group: 'org.opensaml'
		exclude group: 'org.apache.santuario'

		exclude group: 'joda-time'
		exclude group: 'commons-logging'
		exclude group: 'xalan'
	}

	compile 'org.apache.cayenne:cayenne-lifecycle:4.0.M2'

	compile 'foxtrot:foxtrot-core:4.0'

	compile "org.eclipse.jetty:jetty-servlet:$jettyVersion"
	compile "org.eclipse.jetty:jetty-servlets:$jettyVersion"
	compile "org.eclipse.jetty.websocket:websocket-servlet:$jettyVersion"
	compile "org.eclipse.jetty.websocket:websocket-server:$jettyVersion"

	compile 'org.apache.derby:derbyclient:10.11.1.1'
	compile 'org.apache.derby:derbynet:10.11.1.1'

	// can't go above 2.0.5 due to the bug in liquibase [https://liquibase.jira.com/browse/CORE-2265]
	compile 'org.liquibase:liquibase-core:2.0.5-fix'

	compile 'net.sourceforge.jtds:jtds:1.3.1'
	compile 'mysql:mysql-connector-java:5.1.36'

	compile 'org.quartz-scheduler:quartz:2.2.2'
	//log4j2 to slf4j1.7 bridge
	compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.3'

	compile 'commons-lang:commons-lang:2.6' // this exists only to support some old reports. To be removed when all reports upgraded.
	compile ('net.sf.jasperreports:jasperreports:6.1.1') {
		exclude group: 'org.apache.poi', module: 'poi-ooxml'

		exclude group:'org.codehaus.castor'
		exclude group:'com.fasterxml.jackson.core'
		exclude group:'org.apache.lucene'
		exclude group:'org.olap4j'
		exclude group: 'bouncycastle'
	}

	compile 'org.bouncycastle:bcprov-jdk15on:1.53'
	compile 'org.bouncycastle:bcmail-jdk15on:1.53'

	compile 'org.codehaus.groovy:groovy-all:2.4.5'
	compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
	compile 'oauth.signpost:signpost-commonshttp4:1.2.1.2'

	compile 'com.warrenstrange:googleauth:0.4.5'
	compile 'net.glxn.qrgen:javase:2.0'

	compile 'net.sf.supercsv:super-csv:2.3.1'

	compile 'org.reflections:reflections:0.9.10'

	compile 'org.apache.activemq:activemq-broker:5.12.1'
	compile ('org.apache.activemq:activemq-http:5.12.1') {
		exclude group: 'org.eclipse.jetty.aggregate'
	}

	testCompile 'org.mockito:mockito-core:1.10.17'
	testCompile 'org.apache.derby:derbytools:10.11.1.1'
	testCompile 'dbunit:dbunit:2.4.8'
	testCompile 'commons-dbcp:commons-dbcp:1.4'
	testCompile 'xmlunit:xmlunit:1.6' //used for xml export validation tests
}

jar {
	manifest {
		from sharedManifest
		attributes 'Main-Class': 'ish.oncourse.server.AngelServer'
		attributes 'Class-Path': configurations.runtime.collect { "lib/" + it.name }.join(' ')
	}
}

sourceSets {
  main {
	// generate some manifest files for lists of resources to find at runtime
	output.dir("$buildDir/generated-resources/main", builtBy: 'createResourceManifests')
  }
}

configurations.all {
	// this is the last MPL version of iText, so we can't go past this
	resolutionStrategy.force 'com.lowagie:itext:2.1.7.js2'
}

configurations {
    apidocSource
}

dependencies {
    apidocSource "ish.oncourse.willow:waCommon:$waCommonWebservicesClientVersion:sources"
}

apiDocs {
	source = sourceSets.main.groovy.plus(zipTree(configurations.apidocSource.find { it.name.startsWith("waCommon") }))
	destinationDir = reporting.file("api-docs")
}

// TODO need to make this depend on apiDocs
task apidocsBundle(type: Jar) {
	from reporting.file("api-docs")
	classifier "apidocs"
}

// "gradlew publishToMavenLocal" if you want to publish this to your local .m2 folder
publishing {
	publications {
		apidocs(MavenPublication) {
			artifact apidocsBundle
            version '99-SNAPSHOT'
		}
		executables(MavenPublication) {
            artifact(installer_unix) {
				classifier "unix"
				extension "zip"
            }
        }
	}
}

task createResourceManifests {
	doLast {
		def sources = ["resources/oncourse-scripts/export",
					   "resources/oncourse-scripts/import",
					   "resources/oncourse-scripts/reports",
					   "resources/oncourse-scripts/scripts",
					   "resources/oncourse-scripts/email"]
		sources.each { s ->
			def exportManifest = new File("$buildDir/generated-resources/main/$s", "manifest")
			exportManifest.getParentFile().mkdirs()
			exportManifest.write("")

			FileTree tree = fileTree(dir: "src/main/resources/$s", includes: ['**/*.jrxml', '**/*.properties'])
			tree.visit {element ->
				if (!element.isDirectory()) exportManifest.append("$s/$element.relativePath\n")
			}
		}
	}
}
test.dependsOn(createResourceManifests)

task run(dependsOn: [classes, processResources], type: JavaExec) {
	main = 'ish.oncourse.server.AngelServer'
	classpath = sourceSets.main.runtimeClasspath
	args 'DEBUG=true'
	jvmArgs '-Xmx1024m', '-XX:+HeapDumpOnOutOfMemoryError'
}

test {
	ext.dbTests = project.hasProperty('database') ? project.database : "derby-test"

	logger.lifecycle("will run tests in '"+dbTests+"' mode")

	switch (dbTests) {
		case "derby-test":
			systemProperty 'testDatabaseUri', testDatabaseUriDerby
			exclude '**/db/Mysql*.class'
			exclude '**/db/Mssql*.class'
			break

		case "mssql-test":
			assert project.hasProperty('testDatabaseUriMssql') // Please provide the testDatabaseUriMssql in your ~/.gradle/gradle.properties file
			systemProperty 'testDatabaseUri', testDatabaseUriMssql
			exclude '**/db/Mysql*.class'
			exclude '**/db/Derby*.class'
			break

		case "mysql-test":
			assert project.hasProperty('testDatabaseUriMysql') // Please provide the testDatabaseUriMysql in your ~/.gradle/gradle.properties file
			systemProperty 'testDatabaseUri', testDatabaseUriMysql
			exclude '**/db/Mssql*.class'
			exclude '**/db/Derby*.class'
			break
	}
}

cayenne {
	cayenneMap = file ("${projectDir}/../common/src/main/resources/cayenne/AngelMap.map.xml")
	superPkg = "ish.oncourse.cayenne.glue"
	serverSuperPkg = "ish.oncourse.server.cayenne.glue"
	templateDir = file ("${projectDir}/../common/src/main/resources/cayenne/dotemplates/")
	type = 'server'
	destDir = file ("${projectDir}/src/main/java")
}

appBundler {
	distributionPath = project.file("${distsDir}/macosx/")
	appName = "onCourseServer"
	appIdentifier = "ish.oncourse"
	mainClassName = "ish.oncourse.server.AngelServer"
	iconFile = new File(projectDir, "src/packaging/macosx/onCourseServer.icns")
	jars = configurations.runtime.plus(configurations.runtime.artifacts.files)
	keychain = project.osxKeychain
	certIdentity = project.osxKeychainIdentity

	documentTypes = [[
			 extensions: "iocdata",
			 icon      : "onCourseDocument.icns",
			 name      : "onCourse server data file",
			 role      : "Editor",
			 isPackage : "true"
	]]

	jvmOptions = [
			"-Dapple.awt.textantialiasing=true",
			"-DJFileChooser.appBundleIsTraversable=true",
			"-DJFileChooser.packageIsTraversable=true",
			"-Dapple.awt.antialiasing=true",
			"-Dapple.awt.showGrowBox=true",
			"-Xmx${project.maxmemoryServer}"
	]
}

task installer_osx(dependsOn: [prepareKeychains, codeSign], type: au.com.ish.DmgTask) {
	description "Create the OSX application executable and installer (which is just a dmg file)."
}

task bundle_win(dependsOn: jar, type: au.com.ish.Exe4JTask) {
	configFile = file("${projectDir}/src/packaging/windows/server.exe4j.xml")
	jars = configurations.runtime.plus(configurations.runtime.artifacts.files)
	resourceFiles = files("${projectDir}/src/packaging/windows/onCourseServer.ico")
	exeFile = file("${distsDir}/windows/onCourseServer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task bundle_winService(dependsOn: jar, type: au.com.ish.Exe4JTask) {
	configFile = file("${projectDir}/src/packaging/windows/service.exe4j.xml")
	jars = configurations.runtime.plus(configurations.runtime.artifacts.files)
	resourceFiles = files("${projectDir}/src/packaging/windows/onCourseServer.ico")
	exeFile = file("${distsDir}/windows/onCourseService.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task bundle_winService64(dependsOn: jar, type: au.com.ish.Exe4JTask) {
	configFile = file("${projectDir}/src/packaging/windows/service64.exe4j.xml")
	jars = configurations.runtime.plus(configurations.runtime.artifacts.files)
	resourceFiles = files("${projectDir}/src/packaging/windows/onCourseServer.ico")
	exeFile = file("${distsDir}/windows/onCourseService64.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task installer_unix(dependsOn: jar, type: Zip) {
	description "Create the Unix/Linux package (zip)."
	doFirst {
		logger.lifecycle("Creating the unix application executable for $project.name")
	}

	from (configurations.runtime) {
		into 'onCourseServer/lib'
	}
	from (configurations.runtime.artifacts.files) {
		into 'onCourseServer'
	}
	from (file("src/packaging/unix/")) {
		into 'onCourseServer'
	}

	archiveName "onCourseServer.zip"
	destinationDir file("${distsDir}/unix")
}

task installer_win(dependsOn: [bundle_win, prepareKeychains], type: au.com.ish.NsisTask) {
	exeFile = file("${distsDir}/windows/onCourseServer.exe")
	resourceFolder = file("${projectDir}/src/packaging/windows")
	nsiFileName = "server-mui.nsi"
	outputFile = file("${distsDir}/windows/onCourseServer-installer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task installer_winService(dependsOn: [bundle_winService, prepareKeychains], type: au.com.ish.NsisTask) {
	exeFile = file("${distsDir}/windows/onCourseService.exe")
	resourceFolder = file("${projectDir}/src/packaging/windows")
	nsiFileName = "service-mui.nsi"
	outputFile = file("${distsDir}/windows/onCourseService-installer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task installer_winService64(dependsOn: [bundle_winService64, prepareKeychains], type: au.com.ish.NsisTask) {
	exeFile = file("${distsDir}/windows/onCourseService64.exe")
	resourceFolder = file("${projectDir}/src/packaging/windows")
	nsiFileName = "service64-mui.nsi"
	outputFile = file("${distsDir}/windows/onCourseService64-installer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

String sha256(String filename) {
	if (! file(filename).exists()) return "missing file"

	new ByteArrayOutputStream().withStream { result ->
		def e = exec {
			executable = 'shasum' // this is only going to work on OSX
			args = ['-a', '256', filename]
			standardOutput = result
		}
		return result.toString().split()[0]
	}
}
