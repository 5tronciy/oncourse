<?xml version="1.0"?>
<!--
=================================================
			 Angel server build file.
=================================================
-->
<project name="oncourse server" default="build" basedir=".">
	<import file="../build.xml"/>
    		
	<!--
	=================================
	special tasks
	=================================
	-->


	<target name="prepareSampleData" description="Deletes all the reference data from the database on localhost">
		<java maxmemory="${server.maxmemory}" fork="true" classname="org.apache.derby.tools.ij">
			<arg value="${server.resource.dir}/prepareSampleData.sql" />
			<classpath>
				<path location="${lib.dir}/derbytools.jar" />
				<path refid="allLibraries.path" />
			</classpath>
		</java>
		<zip destfile="${server.resource.dir}/sampleData.zip" update="false">
			<fileset dir="${user.home}/Desktop">
				<include name="onCourse.iocdata/**" />
				<exclude name="onCourse.iocdata/derby.log" />
				<exclude name="onCourse.iocdata/onCourse/BACKUP.HISTORY" />
			</fileset>
		</zip>
	</target>


	<!--
	=================================
	target: RetrieveWillowStubs
	=================================
	-->
	<target name="RetrieveWillowStubs" description="Pull the wsdl from the server and rewrite the soap classes">
		<taskdef resource="axis-tasks.properties">
			<classpath refid="allLibraries.path" />
		</taskdef>
		<axis-wsdl2java all="true" output="${src.dir}" verbose="true" url="${angel.soap.server.url}DataPopulationService?WSDL">
			<mapping namespace="${angel.soap.server.namespace1}/ws/DataPopulationService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/1/ws/DataPopulationService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/2/ws/DataPopulationService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/3/ws/DataPopulationService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/4/ws/DataPopulationService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace2}/ws/DataPopulationService" package="au.com.ish.oncourseservices.v3.stubs" />
		</axis-wsdl2java>
		<axis-wsdl2java all="true" output="${src.dir}" verbose="true" url="${angel.soap.server.url}InboundService?WSDL">
			<mapping namespace="${angel.soap.server.namespace1}/ws/InboundService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/1/ws/InboundService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/2/ws/InboundService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/3/ws/InboundService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/4/ws/InboundService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace2}/ws/InboundService" package="au.com.ish.oncourseservices.v3.stubs" />
		</axis-wsdl2java>
		<axis-wsdl2java all="true" output="${src.dir}" verbose="true" url="${angel.soap.server.url}OutboundService?WSDL">
			<mapping namespace="${angel.soap.server.namespace1}/ws/OutboundService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/1/ws/OutboundService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/2/ws/OutboundService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/3/ws/OutboundService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/4/ws/OutboundService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace2}/ws/OutboundService" package="au.com.ish.oncourseservices.v3.stubs" />
		</axis-wsdl2java>
		<axis-wsdl2java all="true" output="${src.dir}" verbose="true" url="${angel.soap.server.url}TransactionService?WSDL">
			<mapping namespace="${angel.soap.server.namespace1}/ws/TransactionService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/1/ws/TransactionService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/2/ws/TransactionService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/3/ws/TransactionService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace1}/4/ws/TransactionService" package="au.com.ish.oncourseservices.v3.stubs" />
			<mapping namespace="${angel.soap.server.namespace2}/ws/TransactionService" package="au.com.ish.oncourseservices.v3.stubs" />
		</axis-wsdl2java>
		<replaceregexp flags="g">
			<regexp pattern='\"http://[^/]+/cgi-bin/WebObjects/(.+)\.woa/-?(\d+/)?ws/([^"]+)\"' />
			<substitution expression='ish.oncourse.server.services.ReplicationManager.SoapBaseUrl() + "\3"' />
			<fileset dir="${src.dir}/au/com/ish/oncourseservices" casesensitive="no">
				<include name="**/*.java" />
			</fileset>
		</replaceregexp>
		<antcall target="--fixWillowStubs" />
	</target>
	
	<target name="--fixWillowStubs" description="Fixes array handlers for soap stubs after regeneration">
		<!--
			 fix generated arrays as documented by IBM
			http://publib.boulder.ibm.com/infocenter/wpc/v5r3m2/index.jsp?topic=/com.ibm.wpc.doc/javaapi/japi6.html
			
			Summary of fixes:
			1) Arrays should have elemField.setMaxOccursUnbounded(true);
			2) Arrays need array bean setter/getter helpers to access the elements of the array
			   as otherwise it only thinks there's one element in the array!
			3) primitive array types (such as byte) need elemField.setNillable(false);
		 -->
		<path id="groovy.classpath">
			<fileset id="groovy.all.files" dir="${common.lib.dir}">
				<include name="groovy-all.jar" />
			</fileset>
		</path>
		<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="groovy.classpath"/>
		
		<!--
		 	stubsFound is the project ref arg to the script
		 -->
		<fileset id="stubsfound" dir="${src.dir}/au/com/ish/oncourseservices/v3">
			<include name="**/*.java"/>
		</fileset>
		<groovy src="${server.resource.dir}/utilities/stubsfix.groovy" />
	</target>
	
	
	
	<!--
	=================================
	target: run the server from jar with all dependencies bundled
	=================================
	-->
	<target name="run" description="alias for local-test for safety purposes!"  depends="local-test"></target>

	<!--
	=================================
	target: avetmiss update
	=================================
	-->
	<target name="avetmiss" description="new avetmiss update">
		<javac
			includeantruntime="false"
			source="${javac.source}"
			target="${javac.target}"
			destdir="${classes.dir}"
			deprecation="false"
			debug="true"
			debuglevel="source,lines">
			<src path="${src.dir}"/>
			<src path="${server.utilities.dir}"/>
			<classpath refid="allLibraries.path" />
		</javac>
		<java classname="NewUpdateAvetmiss" fork="yes">
			<arg path="${server.resource.dir}"/>
			<classpath>
				<path location="${server.classes.dir}" />
				<path refid="allLibraries.path" />
				<path path="${classes.dir}"/>
			</classpath>
		</java>
	</target>

	
	
	<!--
		=================================
		target: itest
		=================================
		-->
		<target name="itest" description="intergration tests" depends="clean, build">
			<property environment="env" />
			<property name="itest.bin" location="classes" />
			<property name="itest.reports" location="dist/reports" />
			
			<!-- Remove previous tests -->
			<delete dir="${itest.reports}" />
			<mkdir dir="${itest.reports}" />

			<path id="test.classpath">
				<path refid="allLibraries.path" />
				<fileset id="junitFile" dir="${common.lib.dir}">
					<include name="junit.jar" />
				</fileset>
				<pathelement location="${classes.dir}" />
			</path>
					
			<!-- compile JUnit test classes -->
			<javac includeantruntime="false" source="${javac.source}" target="${javac.target}" srcdir="itests" destdir="${itest.bin}" deprecation="true" debug="true" debuglevel="source,lines">
				<classpath refid="test.classpath" />
			</javac>
			
			<junit fork="yes" printsummary="yes" haltonfailure="no">
				<formatter type="xml" />
				<batchtest fork="yes" todir="${itest.reports}">
					<fileset dir="${itest.bin}">
						<include name="**/*Test.class" />
					</fileset>
				</batchtest>
				
				<classpath>
					<path refid="test.classpath" />
					<pathelement location="${itest.bin}" />
				</classpath>
			</junit>
		</target>
	
	<!--
	=================================
	target: release-unix
	=================================
	-->
	<target name="release-unix" description="Create a tar.gz archive for unixes such as linux and solaris" depends="clean, buildJarWithDependencies">
		<mkdir dir="${server.distribution.dir}/onCourse" />
		<copy overwrite="true" todir="${server.distribution.dir}/onCourse">
			<fileset dir="${server.distribution.dir}">
				<include name="onCourseServer.jar" />
			</fileset>
			<fileset dir="${server.resource.dir}/packaging/unix">
				<include name="onCourseServer.sh" />
				<include name="log.properties" />
				<include name="onCourse.cfg" />
			</fileset>
		</copy>
		<tar destfile="${server.distribution.dir}/onCourseServer.tar">
			<tarfileset dir="${server.distribution.dir}/onCourse" prefix="onCourse" preserveLeadingSlashes="true">
			</tarfileset>
		</tar>
		<gzip zipfile="${server.distribution.dir}/onCourseServer.tar.gz" src="${server.distribution.dir}/onCourseServer.tar"/>
		<delete dir="${server.distribution.dir}/onCourse"/>	
		<delete file="${server.distribution.dir}/onCourseServer.tar"/>	
	</target>


	<!--
	=================================
	target: release-freebsd
	=================================
	-->
	<target name="release-freebsd" description="create freebsd pkg ready for release" depends="clean, buildJarWithDependencies">
		<mkdir dir="${server.distribution.dir}/addToJar" />
		
		<jar destfile="${server.distribution.dir}/${server.jar}" update="true" basedir="${server.distribution.dir}/addToJar/" duplicate="fail" compress="true" index="true" />
		<delete dir="${server.distribution.dir}/addToJar" />
		
		<!-- Create a tmp directory and put the +COMMENT,+CONTENTS,
		   +DESC,+DISPLAY freebsd pkg files. It should also contain
		   a subdirectory called on onCourse with two files onCourseServer
	   	- which is the start/stop script and onCourseServer.jar -->
		
		<mkdir dir="${server.distribution.dir}/freebsd" />
		<copy overwrite="true" todir="${server.distribution.dir}/freebsd">
			<fileset dir="${server.resource.dir}/packaging/freebsd" />
		</copy>
		<mkdir dir="${server.distribution.dir}/freebsd/onCourse/" />
		<copy overwrite="true" todir="${server.distribution.dir}/freebsd/onCourse/">
			<fileset dir="${server.distribution.dir}">
				<include name="onCourseServer.jar" />
			</fileset>
		</copy>
		<copy overwrite="true" file="${server.distribution.dir}/freebsd/onCourseServer" tofile="${server.distribution.dir}/freebsd/onCourse/onCourseServer" />
		<!--Calculate hashes of all files and replace tokens in +CONTENTS
		   +COMMENT file needs to have it's version number replaced first
		   as it's md5 sum will have to go into the +CONTENTS file-->
		<replace file="${server.distribution.dir}/freebsd/+COMMENT" value="${version.number}">
			<replacetoken>@onCourse.version@</replacetoken> 
		</replace>
		<checksum file="${server.distribution.dir}/freebsd/+COMMENT" property="hash_comment" />
		<checksum file="${server.distribution.dir}/freebsd/+DESC" property="hash_desc" />
		<checksum file="${server.distribution.dir}/freebsd/+DISPLAY" property="hash_display" />
		<checksum file="${server.distribution.dir}/freebsd/onCourse/onCourseServer.jar" property="hash_onCourseServer.jar" />  
		<checksum file="${server.distribution.dir}/freebsd/onCourse/onCourseServer" property="hash_onCourseServer" />	
		
		<replace file="${server.distribution.dir}/freebsd/+CONTENTS" value="${version.number}">
			<replacetoken>@onCourse.version@</replacetoken>
		</replace>
		<replace file="${server.distribution.dir}/freebsd/+CONTENTS" value="${hash_onCourseServer.jar}">
			<replacetoken>@hash_onCourseServer.jar@</replacetoken>
		</replace>
		<replace file="${server.distribution.dir}/freebsd/+CONTENTS" value="${hash_onCourseServer}">
			<replacetoken>@hash_onCourseServer@</replacetoken>
		</replace>
		<replace file="${server.distribution.dir}/freebsd/+CONTENTS" value="${hash_comment}">
			<replacetoken>@hash_comment@</replacetoken>
		</replace>
		<replace file="${server.distribution.dir}/freebsd/+CONTENTS" value="${hash_desc}">
			<replacetoken>@hash_desc@</replacetoken>
		</replace>
		<replace file="${server.distribution.dir}/freebsd/+CONTENTS" value="${hash_display}">
			<replacetoken>@hash_display@</replacetoken>
		</replace>
		<!-- Create a tgz or gz package-->
		<tar tarfile="${server.distribution.dir}/onCourseServer.tar" basedir="${server.distribution.dir}/freebsd" />
		<gzip zipfile="${server.distribution.dir}/${server.dist.freebsd}" src="${server.distribution.dir}/onCourseServer.tar" />
		
		<delete dir="${server.distribution.dir}/freebsd" />
		<delete file="${server.distribution.dir}/onCourseServer.tar" />
	</target>
	
	<!--
	    =================================
	 	target: buildJasperReports
	 	=================================
	 -->
	<target name="buildJasperReports" description="Compile jasper files." depends="--build-common, --CayenneClassGenerator">
		<!-- Compile ish reports-->
		<jrc>
			<src>
				<fileset dir="${jasper.report.dir}" >
					<exclude name="**/*.png"/>
					<exclude name="**/*.pdf"/>
					<exclude name="**/*.zip"/>
				</fileset>
			</src>
			<classpath>
				<path refid="allLibraries.path"/>
				<pathelement location="${common.classes.dir}"/>
			</classpath>
		</jrc>
		
		<!-- now custom reports-->
		<jrc>
			<src>
				<fileset dir="${jasper.customReport.dir}" >
					<exclude name="**/*.png"/>
					<exclude name="**/*.pdf"/>
					<exclude name="**/*.zip"/>
				</fileset>
			</src>
			<classpath>
				<path refid="allLibraries.path"/>
				<pathelement location="${common.classes.dir}"/>
			</classpath>
		</jrc>
		
	</target>
	
	<!--
		    =================================
		 	target: cleanJasperReports
		 	=================================
		 -->
		<target name="cleanJasperReports" description="Clean jasper files">
			<!-- Delete compiled ish reports-->
			<delete verbose="true">
					<fileset dir="${jasper.report.dir}" includes="**/*.jasper" />
			</delete>
			<!-- now custom reports-->
			<delete verbose="true">
					<fileset dir="${jasper.customReport.dir}" includes="**/*.jasper" />
			</delete>
		</target>
	
	
</project>
