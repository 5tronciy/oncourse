<?xml version="1.0"?>
<!--
====================================================
            Angel client build file
====================================================
-->
<project name="client" default="build" basedir=".">
	<import file="../build.xml"/>
	
<!-- NOTE: It's probably a good idea to keep important libraries at the
	end of this list as they might internally contain versions of
	the libraries we are including anyway that they've been compiled
	against. -->
	<path id="requiredLibraries.path">
		<fileset id="requiredLibraries.files" dir="${common.lib.dir}">
			<include name="swing-layout.jar"/>
			<include name="commons-collections.jar"/>
			<include name="velocity.jar"/>
			<include name="commons-logging.jar"/>
			<include name="commons-codec.jar"/>
			<include name="commons-lang.jar"/>
			<include name="commons-httpclient.jar" />
			<include name="log4j.jar"/>
			<include name="hessian.jar"/>
			<include name="cayenne-client.jar"/>
			<include name="ashwood.jar"/>
			<include name="activation.jar"/>
			<include name="mail.jar"/>
			<include name="jasperreports.jar"/>
			<include name="commons-javaflow.jar"/>
			<include name="itext.jar"/>
			<include name="poi.jar"/>
			<include name="commons-beanutils.jar"/>
			<include name="commons-digester.jar"/>
			<include name="jmdns.jar" />
			<include name="foxtrot.jar"/>
			<include name="mistral-EditableImage.jar"/>
			<include name="mistral-Metadata.jar"/>
			<include name="mistral-Operations.jar"/>
			<include name="mistral-Renderer.jar"/>
			<include name="migcalendar.jar"/>
			<include name="miglayout.jar"/>
			<include name="metadata-extractor.jar"/>
		</fileset>
	</path>

	<property name="product.jar" value="${distribution.dir}/${client.jar}"/>
	<property name="main.class" value="ish.oncourse.AngelApp"/>

	<property name="clover.report.dir" value="tests/clover"/>
	<property name="clover.jar" location="../lib/clover.jar"/>
	<taskdef resource="cloverlib.xml" classpath="${clover.jar}"/>
	
	<!--Switch on Clover -->
	<target name="with-clover">
	  <clover-setup/>
	</target>
	
	<target name="generate-clover-reports" depends="with-clover, test">
	  <mkdir dir="${clover.report.dir}"/>
	  <clover-report>
	     <current outfile="${clover.report.dir}/clover.xml" title="Clover">
	     <format type="xml"/>
	     </current>
	  </clover-report>
	</target>
<!--

	=================================
	target: build-common
	=================================
  -->
	<target name="--build-common">
		<ant antfile="${common.project.dir}/build.xml" target="build" inheritall="false"/>
	</target>
<!--
	=================================
	target: clean-common
	=================================
	-->
	<target name="--clean-common">
		<ant antfile="${common.project.dir}/build.xml" target="clean" inheritall="false"/>
	</target>
    <!--
	=================================
	target: build
	=================================
	-->
	<target name="build" description="Compile source." depends="--build-common, --CayenneClassGenerator, --buildresources, --getsvnVersion">
		<ant antfile="${ant.file.global}" target="build" inheritall="false"/>
		<copy overwrite="true" todir="${classes.dir}">
			<fileset dir="${common.classes.dir}"/>
		</copy>
		<javac
		        includeantruntime="false"
		        source="${javac.source}"
			target="${javac.target}"
			srcdir="${src.dir}"
			destdir="${classes.dir}"
			deprecation="false"
			debug="true"
			fork="true"
			debuglevel="source,lines">
			<classpath refid="allLibraries.path" />
		</javac>
		<echo file="${classes.dir}/versioning.txt" message="ClientServer-WedVersion:${clientServerWedVersion}${line.separator}" append="false" />
		<echo file="${classes.dir}/versioning.txt" message="Implementation-Version:${svnVersion}${line.separator}" append="true" />
	</target>

	
	<target name="--CayenneClassGenerator">
		<cgen map="${cayenne.map.dir}/AngelMap.map.xml"
			destDir="${src.dir}"
			superpkg="ish.oncourse.cayenne.glue"
			template="${cayenne.template.dir}/client-subclass.vm"
			supertemplate="${cayenne.template.dir}/client-superclass.vm"
			client="true"
			overwrite="true"
		/>
	</target>
	


	<target name="--buildresources" description="copies resources to output directory">
		<copy overwrite="true" todir="${classes.dir}">
			<fileset dir="${client.project.dir}">
				<include name="resources/images/**"/>
				<include name="resources/cal/**"/>
				<include name="resources/eula.html"/>
				<include name="resources/log_properties/**"/>
				<include name="resources/ssl/clientserverkeystore" />
				<include name="resources/content-types.properties" />
			</fileset>
			<fileset dir="${resource.dir}/">
				<include name="clientserverkeystore" />
			</fileset>
			<fileset dir="${cayenne.map.dir}" includes="*.xml"/>
		</copy>
	</target>
<!--
	=================================
	target: javadocs
	=================================
	-->
	<target name="javadocs" description="Generate API Javadocs" depends="build">
		<delete dir="${client.javadoc.dir}"/>
		<mkdir dir="${client.javadoc.dir}"/>
		<javadoc classpathref="test.classpath" 
                         defaultexcludes="yes" 
                         breakiterator="yes" 
                         use="yes"
                         private="yes"
                         windowtitle="onCourse client"
                         doctitle="ish javadocs"
                         bottom="ish group copyright 1992-2008. All rights reserved." 
                         destdir="${client.javadoc.dir}"
                  packagenames="ish.oncourse.*">
			
			<fileset dir="${client.project.dir}" defaultexcludes="yes">
				<include name="src/**/*.java"/>
				<include name="tests/**/*.java"/>
		    </fileset>
			
			<link href="http://java.sun.com/j2ee/1.4/docs/api/"/>
			<link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
			<link href="http://logging.apache.org/log4j/docs/api/"/>
			<link href="http://jasperreports.sourceforge.net/api/"/>
			<link href="http://jakarta.apache.org/log4j/docs/api/"/>
			<link href="http://cayenne.apache.org/doc/api/"/>
			<link offline="true" href="http://intranet.ish.com.au/javadoc/angel/common/" packagelistLoc="${common.javadoc.dir}"/>
		</javadoc>
		<delete file="${distribution.dir}/docs.zip" />
		<zip destfile="${distribution.dir}/docs.zip"
		     basedir="${client.javadoc.dir}"
		/>
	</target>
<!--
	=================================
	target: clean
	=================================
	-->
	<target name="clean" depends="--clean-common" description="Cleans client">
		<delete dir="${classes.dir}"/>
		<mkdir dir="${classes.dir}"/>
	</target>
<!--
	=================================
	target: run
	=================================
	-->
	<target name="run" description="Run the client" depends="build">
		<java classname="ish.oncourse.AngelApp" maxmemory="${client.maxmemory}" fork="true">
			<jvmarg value="-Dapple.awt.graphics.UseQuartz=true"/>
			<arg value="DEBUG=true"/>
			<classpath>
				<path path="${classes.dir}"/>
				<path refid="requiredLibraries.path"/>
			</classpath>
		</java>
	</target>

	<!--
		=================================
		target: profile
		=================================
		-->
		<target name="profile" description="Profile the client" depends="build">
			<java classname="ish.oncourse.AngelApp" maxmemory="${client.maxmemory}" fork="true">
				<!--jvmarg value="-agentlib:shark"/-->
				<jvmarg value="-Dapple.awt.graphics.UseQuartz=true"/>
				<jvmarg value="-agentlib:yjpagent"/>
				<arg value="DEBUG=true"/>
				<classpath>
					<path path="${classes.dir}"/>
					<path refid="requiredLibraries.path"/>
				</classpath>
			</java>
		</target>
	
	<!--
	=================================
	target: clean&run
	=================================
	-->
	<target name="cleanAndRun" depends="clean,build,run"/>
<!--
	=================================
	target: test
	=================================
	-->
	<target name="test" description="junit tests" depends="clean, build">
		<property name="junit.bin" location="classes"/>
		<property name="junit.reports" location="dist/reports"/>
		
		<!-- Remove previous tests -->
		<delete dir="${junit.reports}"/>
		<mkdir dir="${junit.reports}"/>

		<path id="test.classpath">
			<path refid="allLibraries.path" />
			<fileset id="junitFile" dir="${common.lib.dir}">
				<include name="junit.jar"/>
			</fileset>
			<pathelement location="${classes.dir}"/>
		</path>
				
		<!-- compile JUnit test classes -->
		<javac
			includeantruntime="false"
			source="${javac.source}"
			target="${javac.target}"
			srcdir="tests"
			destdir="${junit.bin}"
			deprecation="true"
			debug="true"
			debuglevel="source,lines">
			<classpath refid="test.classpath"/>
		</javac>
		
		<junit fork="yes" printsummary="yes" haltonfailure="no">
			<formatter type="xml" />
			<batchtest fork="yes" todir="${junit.reports}" >
				<fileset dir="${junit.bin}">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
			
			<classpath>
				<path refid="test.classpath"/>
				<pathelement location="${junit.bin}"/>
			</classpath>
		</junit>
	</target>
	
	
	<!--
		=================================
		target: itest
		=================================
		-->
		<target name="itest" description="integration tests" depends="clean, build">
			<property name="itest.bin" location="classes"/>
			<property name="itest.reports" location="dist/reports"/>
			
			<!-- Remove previous tests -->
			<delete dir="${itest.reports}"/>
			<mkdir dir="${itest.reports}"/>

			<path id="test.classpath">
				<path refid="allLibraries.path" />
				<fileset id="junitFile" dir="${common.lib.dir}">
					<include name="junit.jar"/>
				</fileset>
				<pathelement location="${classes.dir}"/>
			</path>
					
			<!-- compile JUnit test classes -->
			<javac
				includeantruntime="false"
				source="${javac.source}"
				target="${javac.target}"
				srcdir="tests"
				destdir="${itest.bin}"
				deprecation="true"
				debug="true"
				debuglevel="source,lines">
				<classpath refid="test.classpath"/>
			</javac>
			
			<junit fork="yes" printsummary="yes" haltonfailure="no">
				<formatter type="xml" />
				<batchtest fork="yes" todir="${itest.reports}" >
					<fileset dir="${itest.bin}">
						<include name="**/*Test.class" />
					</fileset>
				</batchtest>
				
				<classpath>
					<path refid="test.classpath"/>
					<pathelement location="${itest.bin}"/>
				</classpath>
			</junit>
		</target>
<!--
	=================================
	target: debug
	=================================
	-->
	<target name="debug" description="debug the application" depends="build">
		<nbjpdastart name="AngelClient" addressproperty="jpda.address" transport="dt_socket"/>
		<java classname="ish.oncourse.AngelApp" maxmemory="${client.maxmemory}" fork="true">
			<classpath>
				<path path="${classes.dir}"/>
				<path refid="requiredLibraries.path"/>
			</classpath>
			<jvmarg value="-Xdebug"/>
			<jvmarg value="-Xnoagent"/>
			<jvmarg value="-Djava.compiler=none"/>
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
		</java>
	</target>
<!--
	=================================
	target: createbundle-osx
	=================================
	-->
	<target name="createbundle-osx" description="build OSX deployment" depends="buildjar">
		<taskdef name="jarbundler" classpath="${global.lib.dir}/ant/jarbundler.jar" classname="net.sourceforge.jarbundler.JarBundler">
			<classpath>
				<path refid="allLibraries.path"/>
			</classpath>
		</taskdef>
		
		<delete dir="${distribution.dir}/${client.osxapp}"/>
<!--available OSX options are documented here:
		http://developer.apple.com/documentation/Java/Conceptual/JavaPropVMInfoRef/JavaPropVMInfoRef.pdf
		and JarBundler is here: http://informagen.com/JarBundler/ -->
		<jarbundler dir="${distribution.dir}" verbose="true" name="onCourse"
		    mainclass="ish.oncourse.AngelApp" icon="${client.resource.dir}/onCourse.icns"
		    bundleid="au.ish.com.oncourse.client" version="${client.version}" build="${client.version} (${svnVersion})"
		    infostring="onCourse client ${client.version}, build ${svnVersion}" shortname="onCourse"
		    jvmversion="1.4+" signature="ishO" type="APPL" vmoptions="-Xmx${client.maxmemory}" showplist="false" stubfile="onCourseClient">
			<javaproperty name="apple.laf.useScreenMenuBar" value="true"/> <!-- single menu -->
			<javaproperty name="JFileChooser.packageIsTraversable" value="true"/>
			<javaproperty name="JFileChooser.appBundleIsTraversable" value="true"/>
			<javaproperty name="apple.awt.antialiasing" value="true"/> <!-- use anti-aliasing when rendering graphics -->
			<javaproperty name="apple.awt.textantialiasing" value="true"/> <!-- use anti-aliasing when rendering text -->
			<javaproperty name="apple.awt.showGrowBox" value="true"/> <!--Show the Aqua resize (grow) box -->
			<javaproperty name="apple.awt.graphics.UseQuartz" value="true"/> <!--Use quartz for java2d -->
			<jarfileset dir="${distribution.dir}" includes="${client.jar}"/>
			<jarfileset refid="requiredLibraries.files"/>
		</jarbundler>
	</target>

<!--
	=================================
	target: createbundle-jws
	=================================
	-->
	<target name="createbundle-jws" description="build JWS deployment" depends="clean, buildJarWithDependencies">
		<signjar keystore="${client.doc.dir}/onCourse.keystore" storepass="IshGroupOnCourse2006" jar="${distribution.dir}/${client.jar}" alias="onCourse"/>
	</target>
	
    <!--
	=================================
	target: release-osx
	=================================
	-->
	<target name="release-osx" description="create OSX dmg ready for release" depends="clean, createbundle-osx">
		<property name="tempImage" value="${client.distribution.dir}/onCourse-temp.dmg"/>
		<property name="finalImage" value="${client.distribution.dir}/onCourse.dmg"/>
		<property name="assembyDir" value="${client.distribution.dir}/onCourse"/>

        <!--prepare-->
		<delete dir="${assembyDir}"/>
		<mkdir dir="${assembyDir}"/>

        <!--assemble pieces-->
		<move todir="${assembyDir}" file="${distribution.dir}/${client.osxapp}"/>
		<copy overwrite="true" file="${client.resource.dir}/packaging/macosx/dmg.DS_Store" tofile="${assembyDir}/.DS_Store"/>
		<copy overwrite="true" file="${client.resource.dir}/packaging/macosx/dmg.background.png" tofile="${assembyDir}/background.png"/>
		<exec executable="/Developer/Tools/SetFile">
			<arg line="-a V ${assembyDir}/background.png"/>
		</exec>
		
		<delete file="${tempImage}"/>
		<delete file="${finalImage}"/>
		
		<exec executable="hdiutil">
			<arg line="makehybrid -verbose -hfs -hfs-openfolder onCourse -o ${tempImage} ${assembyDir}"/>
		</exec>
		<exec executable="hdiutil">
			<arg line="convert -verbose -format UDZO -imagekey 7 -o ${finalImage} ${tempImage}"/>
		</exec>

        <!-- cleanup -->
		<delete file="${tempImage}"/>
		<delete dir="${assembyDir}"/>
	</target>
	
    <!--
	=================================
	target: createbundle-win
	=================================
	-->
	<target name="createbundle-win" description="create Windows executable" depends="clean, buildJarWithDependencies">
		    <exe4j projectfile="${client.resource.dir}/packaging/windows/client.exe4j" release="${version.windows}"/>
	</target>
       
	<!--
	=================================
	target: release-win
	=================================
	-->
	<target name="release-win" description="create Windows installer ready for release" depends="createbundle-win">
	    <exec executable="makensis">
		  <arg line="${client.resource.dir}/packaging/windows/client-mui.nsi"/>
	    </exec>
	    <move file="${client.resource.dir}/packaging/windows/onCourse-installer.exe" todir="${distribution.dir}"/>
	    <delete dir="${client.distribution.dir}/onCourse"/>
	</target>

	
	<!--
	=================================
	target: release-all
	=================================
	-->
	<target name="release-all" description="create all production builds" depends="release-osx, release-win">
	</target>
	
	<!-- You have to call this target like this "ant -lib ../lib/ant/commons-net.jar upload" -->
	<target name="upload" description="This uploads the final release files ready for download">
		<fileset id="upload.files" dir="${client.distribution.dir}">
			<include name="${client.dmg}"/>
			<include name="${client.wininstaller}"/>
		</fileset>
		<ant antfile="${ant.file.global}" inheritRefs="true" target="--upload-ftp"/>
	</target>
	
</project>
