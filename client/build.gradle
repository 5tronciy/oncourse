apply plugin: 'macAppBundle'
apply plugin: 'cayenne'

dependencies {
	compile project(':common')
	compile project(':waCommon')

	compile 'commons-lang:commons-lang:2.6'
	compile 'org.apache.cayenne:cayenne-client:3.1B1'
	compile 'org.apache.cayenne:cayenne-tools:3.1B1'
	compile 'foxtrot:foxtrot-core:4.0'
	compile 'com.miglayout:miglayout:4.0'
	compile 'com.migcalendar:migcalendar:6.9.1'
	compile 'org.swinglabs:swing-layout:1.0.3'
	compile ('net.sf.jasperreports:jasperreports:4.6.0') {
		exclude group: 'org.apache.poi', module: 'poi-ooxml'
	}
	
	testCompile project(':server')
	
	testCompile 'dbunit:dbunit:2.4.8'
}

jar {
	manifest {
		from sharedManifest
		attributes 'Main-Class': 'ish.oncourse.AngelApp'
	}
}

cayenne {
	cayenneMap = file ("${projectDir}/../common/src/main/resources/cayenne/AngelMap.map.xml")
	superPkg = "ish.oncourse.cayenne.glue"
	templateDir = file ("${projectDir}/../common/src/main/resources/cayenne/dotemplates/")
	type = 'client'
	destDir = file ("${projectDir}/src/main/java")
}

macAppBundle {
	appOutputDir = 'distributions/macosx'
	dmgOutputDir = 'distributions/macosx'
	creatorCode = "ishS"
	backgroundImage = "${projectDir}/src/packaging/macosx/dmg.background.png"
    mainClassName = "ish.oncourse.AngelApp"
    appName = "onCourse"
    volumeName = "onCourse"
    dmgName = "onCourse"
    bundleExecutable = 'onCourse'
    bundleAllowMixedLocalizations = false
    icon = "${projectDir}/src/packaging/macosx/onCourse.icns"
    jvmVersion = "${sourceCompatibility}+"
    //commented out the codesigning, will re-enable once the new release of the plugin is available
    //certIdentity = "Developer ID Application: ish group pty ltd"
    //keyChain = "/Users/marcin/Library/Keychains/login.keychain"

    //java properties
    javaProperties.put("apple.awt.textantialiasing", "true")
    javaProperties.put("JFileChooser.appBundleIsTraversable", "true")
    javaProperties.put("JFileChooser.packageIsTraversable", "true")    
    javaProperties.put("apple.awt.antialiasing", "true")    
    javaProperties.put("apple.awt.showGrowBox", "true") 

    javaExtras.put("VMOptions", "-Xmx"+"${project.maxmemoryClient}")

    def Map dict = new HashMap();
    dict.put ("CFBundleTypeName", "onCourse server data file")
    dict.put ("CFBundleTypeRole", "Editor")
    dict.put ("CFBundleTypeIconFile", "onCourseDocument.icns")
    dict.put ("CFBundleTypeExtensions", ["iocdata"])
    dict.put ("CFBundleTypeOSTypes", ["ishS"])
    dict.put ("LSTypeIsPackage", "true")

    bundleExtras.put("CFBundleDocumentTypes", [dict])
   
}

task bundle_osx(dependsOn: createApp) {
	description "Create the OSX application executable."
	doFirst {
		logger.lifecycle("Creating the OSX application executable for $project.name")
	}
}

task installer_osx(dependsOn: createDmg) {
	description "Create the OSX installer (which is just a dmg file)."
	doFirst {
		logger.lifecycle("Creating the OSX installer (which is just a dmg file) for $project.name")
	}
}

project.ext.webstartFiles = copySpec {
	into('.') {
		from("${projectDir}/src/packaging/webstart/onCourse.jnlp")

		expand([
			webstartCodebase: project.webstartCodebase,
			webstartOncourseServerUri: project.webstartOncourseServerUri,
			webstartOncourseServerPort: project.webstartOncourseServerPort,
			webstartOncourseServerUseSSL: project.webstartOncourseServerUseSSL,
			sourceCompatibility: project.sourceCompatibility,
			classpath: project.configurations.default.collect{it.name}.sort(),
			mainJarClasspath : configurations.default.allArtifacts.files.singleFile.name,
			version: version
		])
		
		from("${projectDir}/src/main/resources/resources") {
			include '*.ico'
			include '*.icns'
		}
	}

	into('Libraries') {
		from configurations.default
		from configurations.default.allArtifacts.files
		exclude '*-sources.jar'
		exclude '*-javadoc.jar'
	}
}

task bundle_win(dependsOn: jarAll, type: au.com.ish.Exe4JTask) {
	configFile = file("${projectDir}/src/packaging/windows/${project.name}.exe4j.xml")
	jarFile = file("${libsDir}/${project.name}-${project.version}-all.jar")
	resourceFiles = files("${projectDir}/src/packaging/windows/onCourse.ico")
	exeFile = file("${distsDir}/windows/onCourse.exe")
}

task bundle_webstart(dependsOn: jar, type: Copy) {
	description "Create the webstart application executable."
	doFirst {
		logger.lifecycle("Creating the webstart application executable for $project.name")
	}
	with webstartFiles
	into file("${distsDir}/webstart")
	doLast {
			ant.signjar(
				keystore:				project.jarSigningKeystore, 
				storepass:				project.jarSigningKeystorePassword,
				alias:					project.jarSigningAlias, 
				keypass:				project.jarSigningPassword,
				lazy: 					"true",
				preservelastmodified:	"true") {
					fileset(dir: "${distsDir}/webstart/Libraries/") {
						include(name: '*.jar')
					}
				}
	}
}

task installer_webstart(dependsOn: bundle_webstart, type: Zip) {
	
	from file("${distsDir}/webstart/") 
	include 'onCourse.jnlp'
	include 'Libraries/*'
	
	classifier = "webstart"
	version = project.version
	destinationDir = file("${distsDir}/webstart/")
	extension='zip'
}

task installer_win(dependsOn: bundle_win, type: au.com.ish.NsisTask) {
	exeFile = file("${distsDir}/windows/onCourse.exe")
	resourceFolder = file("${projectDir}/src/packaging/windows")
	nsiFileName = "client-mui.nsi"
	outputFile = file("${distsDir}/windows/onCourse-installer.exe")
}