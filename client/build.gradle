import au.com.ish.Exe4JTask
import au.com.ish.NsisTask
import au.com.ish.PackrBundler
import org.gradle.api.internal.artifacts.publish.DefaultPublishArtifact
import org.gradle.internal.os.OperatingSystem

apply plugin: 'org.apache.cayenne'
apply plugin: 'apidoc'

repositories {
	maven {
		url 'https://maven.teamdev.com/repository/products'
	}

	maven {
		url 'https://repo.ish.com.au/content/groups'
	}
}

configurations {
	macCompile
	macJava11
	jreMac

	winCompile
	winJava11
	jreWin

	compile.extendsFrom (OperatingSystem.current().isMacOsX() ? macCompile : winCompile)
	if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
		compile.extendsFrom(OperatingSystem.current().isMacOsX() ? macJava11 : winJava11)
	}
}

dependencies {

	implementation (project(':common')) {
        exclude group: 'org.apache.cayenne', module: 'cayenne-server'
    }

	implementation "org.apache.cayenne:cayenne-client-jetty:$cayenneVersion"
	implementation "org.apache.cayenne:cayenne-protostuff:$cayenneVersion"
	implementation 'com.miglayout:miglayout-swing:4.2'
	implementation 'com.migcalendar:migcalendar:6.9.3'
	implementation 'commons-beanutils:commons-beanutils-core:1.8.3'

	implementation 'com.miglayout:miglayout-javafx:4.2'

	implementation "org.eclipse.jetty:jetty-client:$jettyVersion"
	implementation "org.eclipse.jetty.http2:http2-client:$jettyVersion"
	implementation "org.eclipse.jetty.http2:http2-http-client-transport:$jettyVersion"

	implementation files("$rootDir/lib/jxbrowser/license.jar")

	// the following are needed when compiling on OSX Java 11
	macJava11 "org.openjfx:javafx-base:$openjfxVersion:mac"
	macJava11 "org.openjfx:javafx-graphics:$openjfxVersion:mac"
	macJava11 "org.openjfx:javafx-controls:$openjfxVersion:mac"
	macJava11 "org.openjfx:javafx-fxml:$openjfxVersion:mac"
	macJava11 "org.openjfx:javafx-swing:$openjfxVersion:mac"
	macJava11 "org.openjfx:javafx-media:$openjfxVersion:mac"

	// the following are needed when compiling on OSX any Java version
	macCompile "com.teamdev.jxbrowser:jxbrowser-mac:$jxbrowserVersion"

	// the following are needed when compiling on Windows Java 11
	winJava11 "org.openjfx:javafx-base:$openjfxVersion:win"
	winJava11 "org.openjfx:javafx-graphics:$openjfxVersion:win"
	winJava11 "org.openjfx:javafx-controls:$openjfxVersion:win"
	winJava11 "org.openjfx:javafx-fxml:$openjfxVersion:win"
	winJava11 "org.openjfx:javafx-swing:$openjfxVersion:win"
	winJava11 "org.openjfx:javafx-media:$openjfxVersion:win"

	// the following are needed when compiling on Windows any Java version
	winCompile "com.teamdev.jxbrowser:jxbrowser-win64:$jxbrowserVersion"
	winCompile "com.teamdev.jxbrowser:jxbrowser-win32:$jxbrowserVersion"

	implementation "org.openjfx:javafx-base:$openjfxVersion:linux"
	implementation "org.openjfx:javafx-graphics:$openjfxVersion:linux"
	implementation "org.openjfx:javafx-controls:$openjfxVersion:linux"
	implementation "org.openjfx:javafx-fxml:$openjfxVersion:linux"
	implementation "org.openjfx:javafx-swing:$openjfxVersion:linux"
	implementation "org.openjfx:javafx-media:$openjfxVersion:linux"
	implementation "com.teamdev.jxbrowser:jxbrowser-linux64:$jxbrowserVersion"

//    testImplementation 'org.mockito:mockito-core:1.10.17'
//	testImplementation 'org.apache.poi:poi:3.12-beta1'
//	testImplementation 'org.apache.poi:poi-ooxml:3.12-beta1'
//	testImplementation 'com.github.javafaker:javafaker:0.13'
//	testImplementation (project(':server')) {
//		exclude module: ':client-html'
//	}
//
//	testImplementation "io.bootique:bootique-test:$bootiqueVersion"
//	testImplementation "io.bootique.cayenne:bootique-cayenne:$bootiqueVersion"
//	testImplementation "io.bootique.jdbc:bootique-jdbc-tomcat:$bootiqueVersion"

	jreMac 'net.adoptopenjdk:jre11-mac-x64-hotspot:11.0.4_11@tar.gz'
	jreWin 'net.adoptopenjdk:jre11-win-x64-hotspot:11.0.4_11@zip'
}

jar {
	manifest {
		from sharedManifest
		attributes 'Main-Class': 'ish.oncourse.AngelApp'
	}
}

task run(dependsOn: [classes, processResources], type: JavaExec) {
	main = 'ish.oncourse.AngelApp'
	classpath = sourceSets.main.runtimeClasspath
	args 'DEBUG=true'
	//systemProperty 'simple.message', 'Hello '
}

appBundler {
    distributionPath = "${buildDir}/distributions"
	appName = "onCourse"
	appFile = file("${distributionPath}/${appName}.app")
	dmgFile = file("${distributionPath}/${appName}.dmg")
    appIdentifier = "ish.oncourse"
    mainClassName = "ish.oncourse.AngelApp"
    iconFile = new File(projectDir, "src/packaging/macosx/onCourse.icns")
    jars = (configurations.runtimeClasspath
			+ configurations.runtimeClasspath.artifacts.files
			- configurations.winCompile
			- configurations.winJava11
			+ configurations.macCompile
			+ configurations.macJava11)
    keychain = project.osxKeychain
    certIdentity = project.osxKeychainIdentity
	notarizeAccount = project.notarizeAccount
	notarizePassword = project.notarizePassword

    jvmOptions = ["-Dapple.awt.textantialiasing=true",
                  "-DJFileChooser.appBundleIsTraversable=true",
                  "-DJFileChooser.packageIsTraversable=true",
                  "-Dapple.awt.antialiasing=true",
                  "-Dapple.awt.showGrowBox=true",
				  "-Djava.locale.providers=COMPAT,SPI",
                  "-Xmx${project.maxmemoryClient}"]
}

project.ext.webstartFiles = copySpec {
	into('images') {
		from "${projectDir}/src/main/resources/resources/images/onCourse.png"
		rename '(.+).png', '$1' + "-${project.version}.png"
	}

	into("Libraries") {
		from file("${buildDir}/libs/${project.name}-${project.version}.jar")
	}

	into('jnlp') {
		from "${projectDir}/src/packaging/webstart/onCourse.jnlp"
		rename 'onCourse.jnlp', "onCourse-${project.version}.jnlp"

		expand([
			sourceCompatibility:	project.sourceCompatibility,
			mainJarClasspath:		"Libraries-${project.version}/${project.name}-${project.version}.jar",
			dependenciesJars:		(configurations.runtimeClasspath
										+ configurations.macCompile
										+ configurations.winCompile).files.collect {
										file -> "      <jar href=\"../clients/Libraries/${file.name}\"/>"
									}.join("\n"),
			version:				version,
			maxmemoryClient:		maxmemoryClient
		])
	}
}

def checkManifest = {
	def jarFile = file("${buildDir}/distributions/webstart/Libraries/common-${version}.jar")
	if (!new URL("jar:${jarFile.toURI()}!/").openConnection().manifest.mainAttributes.getValue('Release-Version')) {
		throw new RuntimeException("Manifest missed from ${jarFile.name}")
	}
}

task bundle_webstart(dependsOn: [jar], type: Copy) {
	description "Create the webstart application executable."
	doFirst {
		logger.lifecycle("Creating the webstart application executable for $project.name")
	}
	with webstartFiles
	into file("${buildDir}/distributions/webstart")
	doLast {
		(configurations.runtimeClasspath + configurations.macCompile
				+ configurations.winCompile).files.each { file ->

			if (file.name == "common-${version}.jar") {
				copy {
					from file
					into "${buildDir}/distributions/webstart/Libraries/"
				}
			} else {
				ant.jar(destFile: "${buildDir}/distributions/webstart/Libraries/${file.name}", filesetmanifest: "merge") {
					zipfileset(src: file) {
						exclude(name: '**/*MF')
						exclude(name: '**/*SF')
						exclude(name: '**/*RSA')
						exclude(name: '**/*DSA')
					}
					delegate.manifest {
						attribute(name: 'codebase', value: '*')
						attribute(name: 'permissions', value: 'all-permissions')
						attribute(name: 'Trusted-Library', value: 'true')
					}
				}
			}
		}
		checkManifest()

		if (project.hasProperty('osxKeychainPassword')) {
			logger.lifecycle("Signing jars in webstart bundle")
			ant.signjar(
				keystore:				project.codeSigningTemporaryKeystore,
				storetype:				'pkcs12',
				storepass:				project.codeSigningTemporaryPassword,
				alias:					"oncourse",
				keypass:				project.codeSigningTemporaryPassword,
				sigalg:					"SHA256withRSA",
				digestalg:				"SHA-256",
				tsaurl:					'http://timestamp.comodoca.com?td=sha256',
				lazy: 					"true",
				preservelastmodified:	"true") {
					fileset(dir: "${buildDir}/distributions/webstart/Libraries/") {
						include(name: '*.jar')
					}
				}
		}
	}
}

task installer_webstart(dependsOn: bundle_webstart, type: Zip) {
	from "${buildDir}/distributions/webstart/"
	exclude "*.zip"
	destinationDirectory = file("${buildDir}/distributions/webstart/")
	archiveFileName='onCourse-webstart.zip'
}

/**
 * Extract windows jre from artifact to distsDir/windows/jre directory
 */
task extractWinJre(type: Copy) {
	from zipTree(configurations.jreWin.singleFile)
	into "${buildDir}/distributions/windows"
	doLast {
		String tmpJreName = file("${buildDir}/distributions/windows").listFiles().find{ it.isDirectory() }.name
		file "${buildDir}/distributions/windows/$tmpJreName/" renameTo "${buildDir}/distributions/windows/jre/"
	}
}

task bundle_win(dependsOn: [jar, extractWinJre], type: Exe4JTask) {

	doFirst {
		copy {
			from jars
			into "${buildDir}/distributions/windows/libs"
		}
	}

	configFile = file("${projectDir}/src/packaging/windows/${project.name}.exe4j.xml")
	jars = files(configurations.runtimeClasspath.artifacts.files, configurations.runtimeClasspath.files
			- configurations.macCompile - configurations.macJava11
			+ configurations.winCompile + configurations.winJava11)

	resourceFiles = files("${projectDir}/src/packaging/windows/onCourse.ico")
	exeFile = file("${buildDir}/distributions/windows/onCourse.exe")
	jarLocationPrefix = './libs/'
	configExpandParams = [ maxmemoryClient : project.maxmemoryClient ]

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword = project.codeSigningTemporaryPassword
	}
}

task copyJre(type: Copy) {
	from("${buildDir}/distributions/windows") {
		include 'libs/**'
		include 'jre/'
	}
	into "$buildDir/tmp/installer_win"
}

task installer_win(dependsOn: [bundle_win, copyJre], type: NsisTask) {
	exeFile = file("${buildDir}/distributions/windows/onCourse.exe")
	resourceFolder = file("${projectDir}/src/packaging/windows")
	nsiFileName = "client-mui.nsi"
	outputFile = file("${buildDir}/distributions/windows/onCourse-installer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword = project.codeSigningTemporaryPassword
	}
}

// for help on webstart see src/packaging/webstart/devHowTo.txt
task webstartRun(dependsOn: bundle_webstart, type: Exec) {
	executable 'javaws'
	args "-open", "DEBUG=true", "${buildDir}/distributions/webstart/onCourse.jnlp"
}

task webstartDebug(dependsOn: bundle_webstart, type: Exec) {
	executable 'javaws'
	args "-open", "DEBUG=true", "-verbose", "-J-agentlib:jdwp=transport=dt_socket,server=y,address=8000", "${buildDir}/distributions/webstart/onCourse.jnlp"
}

processResources {
    dependsOn  ':client-html:build', ':client-html:buildLogin'
	doLast {
		copy {
			from('../client-html/build/login') {
				include '**/*.*'
			}
			into 'build/resources/main/static'
		}
	}
}

//task bundle_osx(type: AppBundlerTask) {
//	runtimeJRE = configurations.jreMac.singleFile
//	runtimeIncludes = ["conf/"]
//}
//codeSign.mustRunAfter(bundle_osx)

task bundleJRE_win64(type: PackrBundler) {
	platform = 'win64'
	jars = (configurations.runtimeClasspath + configurations.runtimeClasspath.artifacts.files
			- configurations.macCompile + configurations.winCompile)
	outDir = project.file("${buildDir}/distributions/win64/")
	icon = "${projectDir}/src/packaging/windows/onCourse.ico"

	doLast {
		logger.lifecycle("Unzipping JRE into $projectDir/build/")
		copy {
			from zipTree(configurations.jreWin.singleFile)
			into "${projectDir}/build/win/"
		}

		logger.lifecycle("Copying JRE")
		copy {
			from "$projectDir/build/win/jdk-11+28-jre/"
			into "${buildDir}/distributions/win64/jre/"
		}
	}
}

// For deploying to our repo
publishing.publications {
	executables(MavenPublication) {
		artifact(installer_webstart) {
			classifier "webstart"
			extension "zip"
		}
		artifact(new DefaultPublishArtifact("onCourse-installer", "exe", "exe", null, null,
				file("${buildDir}/distributions/windows/onCourse-installer.exe")).builtBy(installer_win)) {
			classifier "windows"
			extension "exe"
		}
		artifact(new DefaultPublishArtifact("onCourse", "dmg", "dmg", null, null,
				file("${buildDir}/distributions/onCourse.dmg")).builtBy(createDMG)) {
			classifier "osx"
			extension "dmg"
		}
	}
}

cayenne.defaultDataMap "${projectDir}/../common/src/main/resources/cayenne/AngelMap.map.xml"

cgen {
	client = true
	makePairs = true
	createPropertyNames = true
	template = "${projectDir}/../common/src/main/resources/cayenne/dotemplates/client-subclass.vm"
	superTemplate = "${projectDir}/../common/src/main/resources/cayenne/dotemplates/client-superclass.vm"
	mode = 'entity'
	// can not generate cayenne superclasses out of version control,
	// since cgen always generate pairs sub/supes classes (Course.java/_Course.java) or just sub classes (Course.java) - should be under svn
	//destDir =  file ("${projectDir}/build/generated-sources/src/main/java")
	superPkg = 'ish.oncourse.cayenne.glue'
	force = true
}

compileJava.dependsOn cgen