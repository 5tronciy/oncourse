dependencies {
	compile project(':common')
	compile project(':waCommon')

	compile 'commons-lang:commons-lang:2.6'
	compile 'org.apache.cayenne:cayenne-client:3.1B1'
	compile 'org.apache.cayenne:cayenne-tools:3.1B1'
	compile 'foxtrot:foxtrot-core:4.0'
	compile 'com.miglayout:miglayout:4.0'
	compile 'com.migcalendar:migcalendar:6.9.1'
	compile 'org.swinglabs:swing-layout:1.0.3'
	compile ('net.sf.jasperreports:jasperreports:4.6.0') {
		exclude group: 'org.apache.poi', module: 'poi-ooxml'
	}
	
	testCompile project(':server')
	
	testCompile 'dbunit:dbunit:2.4.8'
}

jar {
	manifest {
		from sharedManifest
		attributes 'mainClass': 'ish.oncourse.AngelApp'
	}
}

compileJava {
	doFirst {
		logger.lifecycle("Running cgen to create Cayenne entity files.")
		ant.taskdef(resource: 'org/apache/cayenne/tools/antlib.xml', classpath: project.configurations.compile.asPath) 

		//client-side classes
		ant.cgen(	map:"${projectDir}/../common/src/main/resources/cayenne/AngelMap.map.xml", 
					destDir:"${projectDir}/src/main/java", 
					superPkg:"ish.oncourse.cayenne.glue",
					template:"${projectDir}/../common/src/main/resources/cayenne/dotemplates/client-subclass.vm",
					superTemplate:"${projectDir}/../common/src/main/resources/cayenne/dotemplates/client-superclass.vm",
					makepairs:"true",
					client:"true",
					mode:"all")
	}
}

project.ext.webstartFiles = copySpec {
	into('.') {
		from("${projectDir}/src/packaging/webstart/onCourse.jnlp")

		expand([
			webstartCodebase: project.webstartCodebase,
			webstartOncourseServerUri: project.webstartOncourseServerUri,
			webstartOncourseServerPort: project.webstartOncourseServerPort,
			webstartOncourseServerUseSSL: project.webstartOncourseServerUseSSL,
			sourceCompatibility: project.sourceCompatibility,
			classpath: project.configurations.default.collect{it.name}.sort(),
			mainJarClasspath : configurations.default.allArtifacts.files.singleFile.name,
			version: version
		])
		
		from("${projectDir}/src/main/resources/resources") {
			include '*.ico'
			include '*.icns'
		}
	}

	into('Libraries') {
		from configurations.default
		from configurations.default.allArtifacts.files
		exclude '*-sources.jar'
		exclude '*-javadoc.jar'
	}
}

task bundle_webstart(dependsOn: jar, type: Copy) {
	description "Create the webstart application executable."
	doFirst {
		logger.lifecycle("Creating the webstart application executable for $project.name")
	}
	with webstartFiles
	into file("${distsDir}/webstart")
	doLast {
			ant.signjar(
				keystore:				project.jarSigningKeystore, 
				storepass:				project.jarSigningKeystorePassword,
				alias:					project.jarSigningAlias, 
				keypass:				project.jarSigningPassword,
				lazy: 					"true",
				preservelastmodified:	"true") {
					fileset(dir: "${distsDir}/webstart/Libraries/") {
						include(name: '*.jar')
					}
				}
	}
}

task installer_webstart(dependsOn: bundle_webstart, type: Zip) {
	
	from file("${distsDir}/webstart/") 
	include 'onCourse.jnlp'
	include 'Libraries/*'
	
	classifier = "webstart"
	version = project.version
	destinationDir = file("${distsDir}/webstart/")
	extension='zip'
}

task installer_win(dependsOn: bundle_win, type: Nsis) {
	inputFile = file("${distsDir}/windows/onCourse.exe")
	outputFileName = "onCourse-installer.exe"
}