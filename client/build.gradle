apply plugin: 'cayenne'

dependencies {
	compile (project(':common')) {
        exclude group: 'org.apache.cayenne', module: 'cayenne-server'
    }

	compile "org.apache.cayenne:cayenne-client-jetty:$cayenneVersion"
	compile "org.apache.cayenne:cayenne-protostuff:$cayenneVersion"
	compile 'foxtrot:foxtrot-core:4.0'
	compile 'com.miglayout:miglayout-swing:4.2'
	compile 'com.migcalendar:migcalendar:6.9.3'
	compile 'commons-beanutils:commons-beanutils-core:1.8.3'

	compile 'com.miglayout:miglayout-javafx:4.2'

	// 0.1.40.WS is a custom build of stilts from https://github.com/dzmitryk/stilts
	compile 'org.projectodd.stilts:stilts-stomp-client:0.1.40.WS'


	compile "org.eclipse.jetty:jetty-client:$jettyVersion"
	compile "org.eclipse.jetty.http2:http2-client:$jettyVersion"
	compile "org.eclipse.jetty.http2:http2-http-client-transport:$jettyVersion"

    testCompile 'org.mockito:mockito-core:1.10.17'
	testCompile 'org.apache.poi:poi:3.12-beta1'
	testCompile 'org.apache.poi:poi-ooxml:3.12-beta1'
	testCompile project(':server')
}

jar {
	manifest {
		from sharedManifest
		attributes 'Main-Class': 'ish.oncourse.AngelApp'
	}
}

cayenne {
	cayenneMap = file ("${projectDir}/../common/src/main/resources/cayenne/AngelMap.map.xml")
	superPkg = "ish.oncourse.cayenne.glue"
	templateDir = file ("${projectDir}/../common/src/main/resources/cayenne/dotemplates/")
	type = 'client'
	mode = 'all'
	destDir = file ("${projectDir}/src/main/java")
}

task run(dependsOn: [classes, processResources], type: JavaExec) {
	main = 'ish.oncourse.AngelApp'
	classpath = sourceSets.main.runtimeClasspath
	args 'DEBUG=true'
	//systemProperty 'simple.message', 'Hello '
}

appBundler {
    distributionPath = project.file("${distsDir}/macosx/")
    appName = "onCourse"
    appIdentifier = "ish.oncourse"
    mainClassName = "ish.oncourse.AngelApp"
    iconFile = new File(projectDir, "src/packaging/macosx/onCourse.icns")
    jars = configurations.runtime.plus(configurations.runtime.artifacts.files)
    keychain = project.osxKeychain
    certIdentity = project.osxKeychainIdentity

    jvmOptions = ["-Dapple.awt.textantialiasing=true",
                  "-DJFileChooser.appBundleIsTraversable=true",
                  "-DJFileChooser.packageIsTraversable=true",
                  "-Dapple.awt.antialiasing=true",
                  "-Dapple.awt.showGrowBox=true",
				  "-Djava.locale.providers=COMPAT,SPI",
                  "-Xmx${project.maxmemoryClient}"]
}

task installer_osx(dependsOn: [prepareKeychains, codeSign], type: au.com.ish.DmgTask) {
    description "Create the OSX application executable and installer (which is just a dmg file)."
}

project.ext.webstartFiles = copySpec {
	into('images') {
		from "${projectDir}/src/main/resources/resources/images/onCourse.png"
		rename '(.+).png', '$1' + "-${project.version}.png"
	}

	into("Libraries") {
		from file("${libsDir}/${project.name}-${project.version}.jar")
	}

	into('jnlp') {
		from "${projectDir}/src/packaging/webstart/onCourse.jnlp"
		rename 'onCourse.jnlp', "onCourse-${project.version}.jnlp"

		expand([
			sourceCompatibility:	project.sourceCompatibility,
			mainJarClasspath:		"Libraries-${project.version}/${project.name}-${project.version}.jar",
			dependenciesJars:		configurations.runtime.files.collect {
										file -> "      <jar href=\"../clients/Libraries/${file.name}\"/>"
									}.join("\n"),
			version:				version,
			maxmemoryClient:		maxmemoryClient	
		])
	}
}

task bundle_win(dependsOn: jar, type: au.com.ish.Exe4JTask) {
	configFile = file("${projectDir}/src/packaging/windows/${project.name}.exe4j.xml")
	jars = configurations.runtime.plus(configurations.runtime.artifacts.files)
	resourceFiles = files("${projectDir}/src/packaging/windows/onCourse.ico")
	exeFile = file("${distsDir}/windows/onCourse.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}


def checkManifest = {
	def jarFile = file("${distsDir}/webstart/Libraries/common-${version}.jar")
	if (!new URL("jar:${jarFile.toURI()}!/").openConnection().manifest.mainAttributes.getValue('Release-Version')) {
		throw new RuntimeException("Manifest missed from ${jarFile.name}")
	}
}

task bundle_webstart(dependsOn: [jar, prepareKeychains], type: Copy) {
	description "Create the webstart application executable."
	doFirst {
		logger.lifecycle("Creating the webstart application executable for $project.name")
	}
	with webstartFiles
	into file("${distsDir}/webstart")
	doLast {
		configurations.runtime.files.each { file ->
			if (file.name == "common-${version}.jar") {
				copy {
					from file
					into "${distsDir}/webstart/Libraries/"
				}
			} else {
				ant.jar(destFile: "${distsDir}/webstart/Libraries/${file.name}", filesetmanifest: "merge") {
					zipfileset(src: file) {
						exclude(name: '**/*MF')
						exclude(name: '**/*SF')
						exclude(name: '**/*RSA')
						exclude(name: '**/*DSA')
					}
					delegate.manifest {
						attribute(name: 'codebase', value: '*')
						attribute(name: 'permissions', value: 'all-permissions')
						attribute(name: 'Trusted-Library', value: 'true')
					}
				}
			}
		}
		checkManifest()

		if (project.hasProperty('osxKeychainPassword')) {
			logger.lifecycle("Signing jars in webstart bundle")
			ant.signjar(
				keystore:				project.codeSigningTemporaryKeystore, 
				storetype:				'pkcs12',
				storepass:				project.codeSigningTemporaryPassword,
				alias:					"oncourse", 
				keypass:				project.codeSigningTemporaryPassword,
				sigalg:					"SHA256withRSA",
				digestalg:				"SHA-256",
				tsaurl:					'http://timestamp.comodoca.com?td=sha256',
				lazy: 					"true",
				preservelastmodified:	"true") {
					fileset(dir: "${distsDir}/webstart/Libraries/") {
						include(name: '*.jar')
					}
				}
		}
	}
}

task installer_webstart(dependsOn: bundle_webstart, type: Zip) {
	from "${distsDir}/webstart/"
	exclude "*.zip"
	destinationDir = file("${distsDir}/webstart/")
	archiveName='onCourse-webstart.zip'
}

task installer_win(dependsOn: [bundle_win, prepareKeychains], type: au.com.ish.NsisTask) {
	exeFile = file("${distsDir}/windows/onCourse.exe")
	resourceFolder = file("${projectDir}/src/packaging/windows")
	nsiFileName = "client-mui.nsi"
	outputFile = file("${distsDir}/windows/onCourse-installer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task installer_unix(dependsOn: jar, type: Zip) {
	description "Create the Unix/Linux package (zip)."
	doFirst {
		logger.lifecycle("Creating the unix application executable for $project.name")
	}

	from (configurations.runtime) {
		into 'onCourseClient/lib'
	}
	from (configurations.runtime.artifacts.files) {
		into 'onCourseClient'
	}
	from (file("src/packaging/unix/")) {
		into 'onCourseClient'
	}

	archiveName "onCourseClient.zip"
	destinationDir file("${distsDir}/unix")
}

// For deploying to our repo
publishing {
    publications {
		executables(MavenPublication) {
            artifact(installer_webstart) {
				classifier "webstart"
				extension "zip"
            }
        }
    }
}

// for help on webstart see src/packaging/webstart/devHowTo.txt
task webstartRun(dependsOn: bundle_webstart, type: Exec) {
	executable 'javaws'
	args "-open", "DEBUG=true", "${distsDir}/webstart/onCourse.jnlp"
}

task webstartDebug(dependsOn: bundle_webstart, type: Exec) {
	executable 'javaws'
	args "-open", "DEBUG=true", "-verbose", "-J-agentlib:jdwp=transport=dt_socket,server=y,address=8000", "${distsDir}/webstart/onCourse.jnlp" 
}
