apply plugin: 'macAppBundle'
apply plugin: 'cayenne'

dependencies {
	compile (project(':common')) {
//		TODO: cayenne server jar was added to dependencies because in the cayenne's version
// 				client org.apache.cayenne.ResultIterator extends org.apache.cayenne.access.ResultIterator from server jar
//        exclude group: 'org.apache.cayenne', module: 'cayenne-server'
    }

	compile 'commons-lang:commons-lang:2.6' // TODO: upgrade this to 3.1
	compile 'org.apache.cayenne:cayenne-client:3.2M1.1'
	compile 'foxtrot:foxtrot-core:4.0'
	compile 'com.miglayout:miglayout-swing:4.2'
	compile 'com.migcalendar:migcalendar:6.9.3'
	compile 'commons-beanutils:commons-beanutils-core:1.8.3'

	testCompile 'dbunit:dbunit:2.4.8'
    testCompile 'org.mockito:mockito-core:1.9.5'
	testCompile project(':server')
}

jar {
	manifest {
		from sharedManifest
		attributes 'Main-Class': 'ish.oncourse.AngelApp'
	}
}

cayenne {
	cayenneMap = file ("${projectDir}/../common/src/main/resources/cayenne/AngelMap.map.xml")
	superPkg = "ish.oncourse.cayenne.glue"
	templateDir = file ("${projectDir}/../common/src/main/resources/cayenne/dotemplates/")
	type = 'client'
	destDir = file ("${projectDir}/src/main/java")
}

macAppBundle {
	appOutputDir = 'distributions/macosx'
	//dmgOutputDir = 'distributions/macosx'
	creatorCode = "ishS"
	backgroundImage = "${projectDir}/src/packaging/macosx/dmg.background.png"
    mainClassName = "ish.oncourse.AngelApp"
    appName = "onCourse"
    volumeName = "onCourse"
    dmgName = "onCourse"
    bundleExecutable = 'onCourse'
    bundleAllowMixedLocalizations = false
    icon = "${projectDir}/src/packaging/macosx/onCourse.icns"
    jvmVersion = "${sourceCompatibility}+"
    
    if (project.hasProperty('osxKeychainPassword')) {
		certIdentity = project.osxKeychainIdentity
    	keyChain = project.osxKeychain
    }

    //java properties
    javaProperties.put("apple.awt.textantialiasing", "true")
    javaProperties.put("JFileChooser.appBundleIsTraversable", "true")
    javaProperties.put("JFileChooser.packageIsTraversable", "true")    
    javaProperties.put("apple.awt.antialiasing", "true")    
    javaProperties.put("apple.awt.showGrowBox", "true") 

    javaExtras.put("VMOptions", "-Xmx"+"${project.maxmemoryClient}")

    def Map dict = new HashMap();
    dict.put ("CFBundleTypeName", "onCourse server data file")
    dict.put ("CFBundleTypeRole", "Editor")
    dict.put ("CFBundleTypeIconFile", "onCourseDocument.icns")
    dict.put ("CFBundleTypeExtensions", ["iocdata"])
    dict.put ("CFBundleTypeOSTypes", ["ishS"])
    dict.put ("LSTypeIsPackage", "true")

    bundleExtras.put("CFBundleDocumentTypes", [dict])
   
}

task run(dependsOn: [classes, processResources], type: JavaExec) {
	main = 'ish.oncourse.AngelApp'
	classpath = sourceSets.main.runtimeClasspath
	args 'DEBUG=true'
	//systemProperty 'simple.message', 'Hello '
}

task bundle_osx(dependsOn: createApp) {
	description "Create the OSX application executable."
	doFirst {
		logger.lifecycle("Creating the OSX application executable for $project.name")
	}
}

codeSign.dependsOn(prepareKeychains)

task installer_osx(dependsOn: [codeSign, createDmg]) {
	description "Create the OSX installer (which is just a dmg file)."
	doFirst {
		logger.lifecycle("Creating the OSX installer (which is just a dmg file) for $project.name")
	}
}

project.ext.webstartFiles = copySpec {
	into('images') {
		from file("${projectDir}/src/main/resources/resources/images/onCourse.png")
	}

	into("Libraries-${project.version}") {
		from file("${libsDir}/${project.name}-${project.version}-all.jar")
	}

	into('.') {
		from("${projectDir}/src/packaging/webstart/onCourse.jnlp")
		from("${projectDir}/src/packaging/webstart/onCourseDemo.jnlp")

		expand([
			webstartCodebase: 				project.webstartCodebase,
			webstartOncourseServerUri: 		project.webstartOncourseServerUri,
			webstartOncourseServerPort: 	project.webstartOncourseServerPort,
			webstartOncourseServerUseSSL: 	project.webstartOncourseServerUseSSL,
			sourceCompatibility: 			project.sourceCompatibility,
			mainJarClasspath : 				"Libraries-${project.version}/${project.name}-${project.version}-all.jar",
			version: 						version,
			maxmemoryClient:				maxmemoryClient	
		])
		
		from("${projectDir}/src/main/resources/resources") {
			include '*.ico'
			include '*.icns'
		}
	}
}

task bundle_win(dependsOn: fatJar, type: au.com.ish.Exe4JTask) {
	configFile = file("${projectDir}/src/packaging/windows/${project.name}.exe4j.xml")
	jarFile = file("${libsDir}/${project.name}-${project.version}-all.jar")
	resourceFiles = files("${projectDir}/src/packaging/windows/onCourse.ico")
	exeFile = file("${distsDir}/windows/onCourse.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

task bundle_webstart(dependsOn: [fatJar, prepareKeychains], type: Copy) {
	description "Create the webstart application executable."
	doFirst {
		logger.lifecycle("Creating the webstart application executable for $project.name")
	}
	with webstartFiles
	into file("${distsDir}/webstart")
	doLast {

				if (project.hasProperty('osxKeychainPassword')) {
					logger.lifecycle("Signing fat jar for webstart bundle")
					ant.signjar(
						keystore:				project.codeSigningTemporaryKeystore, 
						storetype:				'pkcs12',
						storepass:				project.codeSigningTemporaryPassword,
						alias:					"oncourse", 
						keypass:				project.codeSigningTemporaryPassword,
						sigalg:					"MD5withRSA",
						digestalg:				"SHA1",
						tsaurl:					'http://timestamp.comodoca.com/rfc3161',
						lazy: 					"true",
						preservelastmodified:	"true") {
							fileset(dir: "${distsDir}/webstart/Libraries-${project.version}/") {
								include(name: '*.jar')
							}
						}
				}
	}
}

task installer_webstart(dependsOn: bundle_webstart, type: Zip) {
	
	from file("${distsDir}/webstart/") 
	include 'onCourse.jnlp'
	include 'onCourseDemo.jnlp'
	include "Libraries-${project.version}/*"
	include 'images/*'
	
	destinationDir = file("${distsDir}/webstart/")
	archiveName='onCourse-webstart.zip'
}

task installer_win(dependsOn: [bundle_win, prepareKeychains], type: au.com.ish.NsisTask) {
	exeFile = file("${distsDir}/windows/onCourse.exe")
	resourceFolder = file("${projectDir}/src/packaging/windows")
	nsiFileName = "client-mui.nsi"
	outputFile = file("${distsDir}/windows/onCourse-installer.exe")

	if (project.hasProperty('osxKeychainPassword')) {
		certificateFile = file (project.codeSigningTemporaryKeystore)
		certificateFilePassword= project.codeSigningTemporaryPassword
	}
}

// for help on webstart see src/packaging/webstart/devHowTo.txt
task webstartRun(dependsOn: bundle_webstart, type: Exec) {
	executable 'javaws'
	args "-open", "DEBUG=true", "${distsDir}/webstart/onCourse.jnlp"
}

task webstartDebug(dependsOn: bundle_webstart, type: Exec) {
	executable 'javaws'
	args "-open", "DEBUG=true", "-verbose", "-J-agentlib:jdwp=transport=dt_socket,server=y,address=8000", "${distsDir}/webstart/onCourse.jnlp" 
}
