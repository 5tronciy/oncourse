project.ext {
	svnversion = svnVersion()
}

buildscript {
	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
	}

	dependencies {
		classpath 'org.apache.cayenne:cayenne-tools:3.1B1'
	}
}


allprojects {
	apply plugin: 'java'
	apply plugin: 'maven'

	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'http://repo.ish.com.au/content/groups/ish'
		}
	}

	uploadArchives {
		repositories.mavenDeployer {
			repository(url: 'http://repo.ish.com.au/content/repositories/ish-releases')
			snapshotRepository(url: 'http://repo.ish.com.au/content/repositories/ish-snapshots')
		}
	}

	dependencies {
		testCompile 'junit:junit:4.8.2'
		compile 'log4j:log4j:1.2.17'
	}

	ext.sharedManifest = manifest {
		attributes('SCM-Revision': project.svnversion, 'Release-Version': version)
	}

	version = 4.0

	if(!System.properties.'release') {
		version = version + '-SNAPSHOT'
		logger.lifecycle("Building ${project.name} ${version} (build: ${svnversion})")
	} else {
		logger.lifecycle("Building ${project.name} release ${version} (build: ${svnversion})")
	}


	test {
		systemProperties 'java.awt.headless': 'true'
		maxHeapSize = '1024m'
		jvmArgs "-XX:MaxPermSize=256m"
	}
}

String svnVersion() {
	try {
		new ByteArrayOutputStream().withStream { os ->
				def result = exec {
					executable = 'svnversion'
					standardOutput = os
				}
				return os.toString().trim()
			}
	} catch (Exception e) {
		return "unavailable"
	}
}
	
configure(subprojects.findAll {it.name == 'server' || it.name == 'client'}) { 
	apply plugin: 'svnrelease'
	release.failOnSnapshotDependencies = true
	project.ext {
		appName = getProject().name == 'server' ? "onCourseServer" : "onCourse"
	}

	version = 4.0 //TODO: don't know why this needs to be here as well as in allProjects

	task jarAll(dependsOn: configurations.default.allArtifacts.buildDependencies, type: Jar) {
		description = 'Creates a shaded/uberjar/fatjar of the application.'
		classifier = 'all'

		manifest {
			from project.jar.manifest
		}

		from (sourceSets.main.output.classesDir)
		from (sourceSets.main.output.resourcesDir)

		doFirst {
			logger.lifecycle("Creating an fatjar for $project.name ")

			// the following must be executed in doFirst since the configuration
			// has not been initialized at configuration time
			from (configurations.runtime.resolve().collect { it.isDirectory() ? it : zipTree(it) }) {
				exclude 'META-INF/MANIFEST.MF'
				exclude 'META-INF/*.SF'
				exclude 'META-INF/*.DSA'
				exclude 'META-INF/*.RSA'
			}
		}
	}

	project.ext.webstartFiles = copySpec {
		into('.') {
			from("${projectDir}/src/packaging/webstart/onCourse.jnlp")

			evaluationDependsOn(':'+getProject().name)

			expand([
				webstartCodebase: project.webstartCodebase,
				webstartOncourseServerUri: project.webstartOncourseServerUri,
				webstartOncourseServerPort: project.webstartOncourseServerPort,
				webstartOncourseServerUseSSL: project.webstartOncourseServerUseSSL,
				sourceCompatibility: project.sourceCompatibility,
				classpath: project.configurations.default.collect{it.name}.sort(),
				mainJarClasspath : configurations.default.allArtifacts.files.singleFile.name,
				version: version
			])
			
			from("${projectDir}/src/main/resources/resources") {
				include '*.ico'
				include '*.icns'
			}
		}

		into('Libraries') {
			from configurations.default
			from configurations.default.allArtifacts.files
			exclude '*-sources.jar'
			exclude '*-javadoc.jar'
		}
	}

	project.ext.osxAppFiles = copySpec {
		into("${project.appName}.app") {

			into('Contents') {
				from "${projectDir}/src/packaging/macosx/Info.plist"

				evaluationDependsOn(':' + getProject().name)

				expand([
					maxmemoryServer: project.maxmemoryServer,
					maxpermgenServer: project.maxpermgenServer,
					maxmemoryClient: project.maxmemoryClient,
					sourceCompatibility: project.sourceCompatibility,
					classpath: project.configurations.default.resolve().collect{it.name}.sort(),
					mainJarClasspath : configurations.default.allArtifacts.files.singleFile.name,
					version: version,
					JAVAROOT: '$JAVAROOT' // just a hack to ignore this variable
				])

				from("${projectDir}/src/packaging/macosx/PkgInfo")
			}

			into('Contents/Resources') {
				from("${projectDir}/src/packaging/macosx") {
					include "*.ico"
					include "*.icns"
				}
			}

			into('Contents/MacOS') {
				from("${projectDir}/../common/resources/JavaApplicationStub")
				rename 'JavaApplicationStub', project.appName
				fileMode = 0755
			}

			into('Contents/Resources/Java') {
				from configurations.default
				from configurations.default.allArtifacts.files
				exclude '*-sources.jar'
				exclude '*-javadoc.jar'
			}
		}
	}

	project.ext.osxDmgFiles = copySpec {
		into ('onCourseServer.app') {
			from("${distsDir}/macosx/onCourseServer.app")
		}

		into('.background') {
			from('${projectDir}/src/packaging/macosx')
			include 'background.png'
		}

		into ('.') {
			from("${projectDir}/src/packaging/macosx")
			include 'dmg.DS_Store'
			rename 'dmg.DS_Store', '.DS_Store'
		}
	}

	project.ext.winAppFiles = copySpec {
		into('.') {
			from("${projectDir}/src/packaging/windows/")
			include '*.exe4j.xml'
			expand([
				maxmemoryServer: project.maxmemoryServer,
				maxmemoryServer64: project.maxmemoryServer64,
				maxpermgenServer: project.maxpermgenServer,
				maxmemoryClient: project.maxmemoryClient,
				sourceCompatibility: sourceCompatibility,
				version: version,
				jarAll: "${libsDir}/${project.name}-${version}-all.jar"
			])
		}

		into('.') {
			from("${projectDir}/src/packaging/windows/")
			include '*.ico'
		}
	}

	project.ext.freebsdAppFiles = copySpec {
		into('.') {
			from("${projectDir}/src/packaging/freebsd/")
			include ("*")

			ant.property(name: '@maxmemoryServer64@', value: project.maxmemoryServer64)
			ant.property(name: '@project.name@', value: project.name)
			ant.property(name: '@version@', value: project.version)
			filter(org.apache.tools.ant.filters.ReplaceTokens, project: ant.antProject)

			from("${libsDir}/${project.name}-${version}-all.jar")
		}
	}

	project.ext.unixAppFiles = copySpec {
		into('.') {
			from("${projectDir}/src/packaging/unix/")
			include ("*")

			ant.property(name: '@maxmemoryServer64@', value: project.maxmemoryServer64)
			ant.property(name: '@project.name@', value: project.name)
			ant.property(name: '@version@', value: project.version)
			filter(org.apache.tools.ant.filters.ReplaceTokens, project: ant.antProject)

			from("${libsDir}/${project.name}-${version}-all.jar")
		}
	}


	task bundle_webstart(dependsOn: jar, type: Copy) {
		description "Create the webstart application executable."
		doFirst {
			logger.lifecycle("Creating the webstart application executable for $project.name")
		}
		with webstartFiles
		into file("${distsDir}/webstart")
		doLast {
  			ant.signjar(
  				keystore:				project.jarSigningKeystore, 
  				storepass:				project.jarSigningKeystorePassword,
  				alias:					project.jarSigningAlias, 
  				keypass:				project.jarSigningPassword,
  				lazy: 					"true",
  				preservelastmodified:	"true") {
  					fileset(dir: "${distsDir}/webstart/Libraries/") {
  						include(name: '*.jar')
  					}
  				}
		}
	}

	task bundle_osx(dependsOn: jar, type: Copy) {
		description "Create the OSX application executable."
		doFirst {
			logger.lifecycle("Creating the OSX application executable for $project.name")
		}
		with osxAppFiles
		into file("${distsDir}/macosx")
		doLast {
			try {
				exec {
					executable = "codesign"
					args = [	
						"-s", "ish group testing certificate",
						"-f", "${distsDir}/macosx/${project.appName}.app"]
				}
				logger.lifecycle("${project.appName}.app successfully codesigned")
			} catch (Exception e) {
				logger.lifecycle("${project.appName}.app was not codesigned")
			}
		}
	}

	task bundle_win(dependsOn: jarAll, type: Copy) {
		description "Create the Windows application executable."
		doFirst {
			logger.lifecycle("Creating the Windows application executable for $project.name")
		}
		with winAppFiles
		into file("${distsDir}/windows")

		doLast {
			ant.taskdef(name: 'exe4j', classname: 'com.exe4j.Exe4JTask', classpath: "${projectDir}/../lib/exe4j/bin/ant.jar")
			
			def exe4jCollection = file("${distsDir}/windows").listFiles().findAll {it.name.endsWith('.exe4j.xml')}
			for (File file : exe4jCollection) {
				logger.lifecycle("executing exe4j with "+file.getAbsolutePath())
				ant.exe4j(projectfile: file, release: version, requirelicense: 'true')
			}
			logger.info("Deleting windows work files");
			delete winAppFiles
		}
	}

	task bundle(dependsOn: [bundle_win, bundle_osx, bundle_webstart]) {
		description "Create all application executables."
	}

	task install_freebsd(dependsOn: jarAll, type: Copy) {
		description "Create the FreeBSD package (installer)."
		doFirst {
			logger.lifecycle("Creating the freebsd application executable for $project.name")
		}
		
		with freebsdAppFiles
		into file("${distsDir}/freebsd")

		doLast {
			logger.lifecycle("Calculating checksums for the $project.name freebsd application executable")
			ant.checksum(file:"${distsDir}/freebsd/+COMMENT", 										property: "hash_comment")
			ant.checksum(file:"${distsDir}/freebsd/+DESC", 											property: "hash_desc")
			ant.checksum(file:"${distsDir}/freebsd/+DISPLAY", 										property: "hash_display")
			ant.checksum(file:"${distsDir}/freebsd/${project.name}-${project.version}-all.jar", 	property: "hash_onCourseServerJar")
			ant.checksum(file:"${distsDir}/freebsd/onCourseServer", 								property: "hash_onCourseServer")

			ant.replace(file: "${distsDir}/freebsd/+CONTENTS", token: "@hash_onCourseServerJar@", 	value: "${ant.hash_onCourseServerJar}")
			ant.replace(file: "${distsDir}/freebsd/+CONTENTS", token: "@hash_onCourseServer@", 		value: "${ant.hash_onCourseServer}")
			ant.replace(file: "${distsDir}/freebsd/+CONTENTS", token: "@hash_comment@", 			value: "${ant.hash_comment}")
			ant.replace(file: "${distsDir}/freebsd/+CONTENTS", token: "@hash_desc@", 				value: "${ant.hash_desc}")
			ant.replace(file: "${distsDir}/freebsd/+CONTENTS", token: "@hash_display@", 			value: "${ant.hash_display}")
		}	
	} 

	task install_unix(dependsOn: jarAll, type: Copy) {
		description "Create the Unix/Linux package (zip)."
		doFirst {
			logger.lifecycle("Creating the unix application executable for $project.name")
		}
		with unixAppFiles
		into file("${distsDir}/unix")
	}

	task installer_osx(dependsOn: bundle_osx, type: Copy) {
		description "Create the OSX installer (which is just a dmg file)."
		doFirst {
			logger.lifecycle("Creating the OSX installer (which is just a dmg file) for $project.name")
		}

		def dmgSource = "${distsDir}/macosx/onCourseServer-${version}"

		with osxDmgFiles
		into file(dmgSource)

		doLast {
			if (file("${dmgSource}.dmg").exists()) delete "${dmgSource}.dmg"

			exec {
				executable = "hdiutil"
				args = ["create", 
				"-srcfolder", dmgSource,
				"-volname", "onCourseServer",
				"${dmgSource}.dmg"]
			}
			logger.info("Deleting dmg work files");
			delete dmgSource
		}
	}

	task installer_win(dependsOn: bundle_win, type: Copy) {
		description "Create the Windows installer."
		doFirst {
			logger.lifecycle("Creating the Windows installer for $project.name")
		}

		into file("${buildDir}/packaging/windows")
		from("${projectDir}/src/packaging/windows/*.nsi")

		doLast {
			exec {
				executable = "makensis"
				args = "${distsDir}/windows/server-mui.nsi"
			}
			exec {
				executable = "makensis"
				args = "${distsDir}/windows/service-mui.nsi"
			}
			exec {
				executable = "makensis"
				args = "${distsDir}/windows/service64-mui.nsi"
			}
		}
	}

	task installer(dependsOn: [installer_win, installer_osx, bundle_webstart]) {
		description "Create all application installers."
	}
}