buildscript {
	ext {
		waCommonWebservicesClientVersion = '9.5.8'
		log4j2Version = '2.10.0'
		cayenneVersion = '4.0.B2'
		jettyVersion = '9.4.6.v20170531'
		mariadbVersion = '2.2.1'
		derbyVersion = '10.14.1.0'
		googleGuiceVersion = '4.1.0'
	}
	
	repositories {
		maven {
			url 'https://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'https://repo.ish.com.au/content/groups/ish'
		}
	}

	dependencies {
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
		classpath "org.apache.cayenne:cayenne-ant:$cayenneVersion"
	}
}

plugins {
	id 'jacoco' // adds the task 'jacocoTestReport'

	id 'findbugs'
	id 'io.spring.dependency-management' version '1.0.1.RELEASE' apply false
	id 'com.github.ben-manes.versions' version '0.17.0' // adds the task 'dependencyUpdates -Drevision=release'
}

apply plugin: 'idea'

allprojects {

	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'appBundler'
	apply plugin: 'maven-publish'

	// get the version from the command line properties
	version = project.hasProperty('releaseVersion') ? project.releaseVersion : "SNAPSHOT"

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	configurations {
		deployerJars {
			description = 'Jars needed for doing deployment to JBoss Nexus repo'
		}
	}

	repositories {
		maven {
			url 'https://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'https://repo.ish.com.au/content/groups/ish'
		}
	}

	dependencies {
		testCompile 'junit:junit:4.12'
		testCompile 'org.dbunit:dbunit:2.4.9'

		compile "org.apache.logging.log4j:log4j-api:$log4j2Version"
		compile "org.apache.logging.log4j:log4j-core:$log4j2Version"
		compile "org.apache.logging.log4j:log4j-1.2-api:$log4j2Version"
		compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version"
		compile "org.apache.logging.log4j:log4j-jcl:$log4j2Version"
		
        compile 'com.google.code.findbugs:jsr305:3.0.2'

		// The following is needed until we upgrade waCommon which is forcing Cayenne back to 4.0M3.2
		configurations.all {
			resolutionStrategy {
				force "org.apache.cayenne:cayenne-server:$cayenneVersion"
			}
		}
    }

	group = 'ish.oncourse.angel'
	publishing {
		repositories {
			maven {
				name "executables"
				url "https://repo.ish.com.au/content/repositories/ish-exe"
				credentials {
					username nexusUsername
					password nexusPassword
				}
			}
			maven {
				name "snapshots"
				url "https://repo.ish.com.au/content/repositories/ish-snapshots"
				credentials {
					username nexusUsername
					password nexusPassword
				}
			}
			maven {
				name "releases"
				url "https://repo.ish.com.au/content/repositories/ish-releases"
				credentials {
					username nexusUsername
					password nexusPassword
				}
			}
		}
	}

	ext.sharedManifest = manifest {
		attributes 'Release-Version': version,
			'Built-Date': new Date().format("dd-MMM-yyy"),
			'Built-JDK': System.getProperty('java.version'),
			'Built-Gradle': gradle.gradleVersion,
			'Implementation-Version': System.getProperty('build_number') ?: 'local', 
			'SCM-Revision': System.getProperty('svn_revision') ?: 'development',
			'Permissions': 'all-permissions',
			'Codebase': '*',
			'Application-Name': 'onCourse',
			'Trusted-Library': 'true'
	}

	test {
		forkEvery = 1 //run every test in separate jvm
		
		systemProperties 'java.awt.headless': 'true',
		    'java.locale.providers': 'COMPAT,SPI'
		maxHeapSize = '1024m'

		jacoco {
			//enabled = project.hasProperty('jacoco-enabled');
		}

		ignoreFailures = true
		
		// log each starting test
		beforeTest { 
			descriptor -> logger.lifecycle("Running: " + descriptor)
		}
	}

	findbugs {

	}

	// special Java 9 hack needed for gradle
	// https://github.com/gradle/gradle/issues/1095
	tasks.withType(Test) {
		if(JavaVersion.current() == JavaVersion.VERSION_1_9) {
			jvmArgs += ['--add-opens', 'java.base/java.lang=ALL-UNNAMED']
			jvmArgs += ['--add-opens', 'java.base/java.io=ALL-UNNAMED']
			jvmArgs += ['--add-opens', 'java.base/java.util=ALL-UNNAMED']
		}
	}
}
	
configure(subprojects.findAll {it.name == 'server' || it.name == 'client'}) { 

	project.ext {
		appName = getProject().name == 'server' ? "onCourseServer" : "onCourse"
	}

	task prepareKeychains {
		doLast{
			if (project.hasProperty('osxKeychainPassword')) {
				logger.lifecycle("Unlocking the keychain: "+project.osxKeychain)
				exec {
					executable = 'security'
					args = ['unlock-keychain', '-p', project.osxKeychainPassword, project.osxKeychain]
				}
				logger.lifecycle("Unlocking the keychain: "+project.osxKeychain)
				exec {
					executable = 'security'
					args = ['unlock-keychain', '-p', project.osxKeychainPassword, project.osxKeychain]
				}
				logger.lifecycle("Exporting the windows keychain into pkcs12 format: "+project.codeSigningTemporaryKeystore)
				exec {
					executable= 'security'
					args = ['export', 	'-k', project.osxKeychain,
							'-t', 'all', 
							'-f', 'pkcs12',
							'-P', project.codeSigningTemporaryPassword, 
							'-o', project.codeSigningTemporaryKeystore]
				}
			} else {
				logger.lifecycle("Cannot unlock keychain, please provide osxKeychainPassword in gradle.properties")
			}
		}
	}
	

	task bundle(dependsOn: tasks.findAll { task -> task.name.startsWith('bundle_') }) {
		description "Create all application executables."
	}

	bundle.dependsOn {
		project.tasks.findAll { it.name.startsWith('bundle_') }
	}

	task installer(){
		description "Create all application installers."
	}
	installer.dependsOn {
		project.tasks.findAll { it.name.startsWith('installer_') }
	}
	codeSign.dependsOn {
		project.prepareKeychains
	}
}

task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	// Include the results from the `test` task in all subprojects
	reportOn subprojects*.test
}

task wrapper(type: Wrapper) {
	gradleVersion = "4.5.1"
}