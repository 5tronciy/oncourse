import org.gradle.internal.os.OperatingSystem

buildscript {
	ext {
		waCommonWebservicesClientVersion = '69'
		log4j2Version = '2.12.1'
		cayenneVersion = '4.1.RC2'
		jettyVersion = '9.4.22.v20191022'
        mariadbVersion = '2.4.3'
		derbyVersion = '10.15.1.3'
		googleGuiceVersion = '4.2.2'
		groovyVersion = '2.5.8'
		springframeworkVersion = '5.0.6.RELEASE'
		bouncycastleVersion = '1.59'
		bootiqueVersion = '1.0'
		jxbrowserVersion = '6.23.1'
		cfxVersion = '3.3.3'
		jacksonVersion = '2.9.9'
		javaxActivationVersion = '1.2.0'

		openjfxVersion = '11.0.2'
		osVersion = OperatingSystem.current().isMacOsX() ? 'mac' : OperatingSystem.current().isWindows() ? 'win' : 'linux'
	}

	repositories {
		maven {
			url 'https://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'https://repo.ish.com.au/content/groups/ish'
		}
	}

	//use stable cayenne-gradle-plugin version since latest one (4.1.RC1) broken - properties from parent class
	// are added to subclass
	//https://issues.apache.org/jira/browse/CAY-2633
	dependencies {
		classpath "org.apache.cayenne.plugins:cayenne-gradle-plugin:$cayenneVersion"
	}
}

plugins {
	id 'io.spring.dependency-management' version '1.0.3.RELEASE' apply false
	id 'com.github.ben-manes.versions' version '0.27.0' // adds the task 'dependencyUpdates -Drevision=release'
	id "com.moowork.node" version '1.3.1' apply false
	id 'com.github.psxpaul.execfork' version '0.1.12' apply false
	id 'com.dorongold.task-tree' version '1.4' // adds the task 'taskTree [some task]'
}

taskTree{
	noRepeat = true  //do not print a sub-tree in the task-tree more than once
}

apply plugin: 'idea'

allprojects {

	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'appBundler'
	apply plugin: 'maven-publish'

	// get the version from the command line properties
	version = project.hasProperty('releaseVersion') && project.releaseVersion ? project.releaseVersion : "99-SNAPSHOT"

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	tasks.withType(AbstractCompile) {
		options.with {
			incremental = true
		}
	}

	configurations {
		deployerJars {
			description = 'Jars needed for doing deployment to JBoss Nexus repo'
		}
	}

	repositories {
		maven {
			url 'https://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'https://repo.ish.com.au/content/groups/ish'
		}
	}

	if (it.name != 'api-test') {
		dependencies {

			compile "org.apache.logging.log4j:log4j-api:$log4j2Version"
			compile "org.apache.logging.log4j:log4j-core:$log4j2Version"
			compile "org.apache.logging.log4j:log4j-1.2-api:$log4j2Version"
			compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version"
			compile "org.apache.logging.log4j:log4j-jcl:$log4j2Version"
		}
	}

	dependencies {
		implementation "org.codehaus.groovy:groovy-all:$groovyVersion"
		implementation "org.codehaus.groovy:groovy-dateutil:$groovyVersion"
		// Needed by Java 9 and above
		compile 'javax.xml.bind:jaxb-api:2.3.0'
		compile 'javax.xml.ws:jaxws-api:2.3.0'
		compile 'javax.annotation:javax.annotation-api:1.3.2'

		testCompile 'junit:junit:4.12'
		testCompile 'org.dbunit:dbunit:2.6.0'

        compile 'com.google.code.findbugs:jsr305:3.0.2'

		// The following is needed until we upgrade waCommon which is forcing Cayenne back to 4.0M3.2
		configurations.all {
			resolutionStrategy {
				force "org.apache.cayenne:cayenne-server:$cayenneVersion"
			}
		}
    }

	group = 'ish.oncourse.angel'

	publishing {
        repositories {
            maven {
                name = "ish"
                def repo = version.endsWith('SNAPSHOT') ? 'ish-snapshots' : 'ish-releases'
                url = "https://repo.ish.com.au/content/repositories/${repo}"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }

	ext.sharedManifest = manifest {
		attributes 'Release-Version': version,
			'Built-Date': new Date().format("dd-MMM-yyy"),
			'Built-JDK': System.getProperty('java.version'),
			'Built-Gradle': gradle.gradleVersion,
			'Implementation-Version': System.getProperty('build_number') ?: 'local',
			'SCM-Revision': System.getProperty('svn_revision') ?: 'development',
			'Permissions': 'all-permissions',
			'Codebase': '*',
			'Application-Name': 'onCourse',
			'Trusted-Library': 'true'
	}

	test {
		systemProperties 'java.awt.headless': 'true',
		    'java.locale.providers': 'COMPAT,SPI'
		maxHeapSize = '2G'
		maxParallelForks = 1
		ignoreFailures = true

		// log each starting test
		beforeTest {
			descriptor -> logger.lifecycle("Running: " + descriptor)
		}

		reports {
			junitXml.enabled = true
		}
	}
}

configure(subprojects.findAll {it.name == 'server' || it.name == 'client'}) {

	configurations {
		appBundler
	}

	repositories {
		maven {
			url 'https://repo.ish.com.au/repository/thirdparty'
		}
	}

	dependencies {
		appBundler "com.oracle:appbundler:1.0ea-20181222"
	}

	project.ext {
		appName = getProject().name == 'server' ? "onCourseServer" : "onCourse"
	}

	task prepareKeychains {
		doLast{
			if (project.hasProperty('osxKeychainPassword')) {
				logger.lifecycle("Unlocking the keychain: "+project.osxKeychain)
				exec {
					executable = 'security'
					args = ['unlock-keychain', '-p', project.osxKeychainPassword, project.osxKeychain]
				}
				logger.lifecycle("Unlocking the keychain: " + project.osxKeychain)
			} else {
				logger.lifecycle("Cannot unlock keychain, please provide osxKeychainPassword in gradle.properties")
			}
		}
	}

	task bundle(dependsOn: tasks.findAll { task -> task.name.startsWith('bundle_') }) {
		description "Create all application executables."
	}

	bundle.dependsOn {
		project.tasks.findAll { it.name.startsWith('bundle_') }
	}

	task installer() {
		description "Create all application installers."
	}

	installer.dependsOn {
		project.tasks.findAll { it.name.startsWith('installer_') }
	}

	notarize.onlyIf {
				!version.endsWith('SNAPSHOT')
	}

	afterEvaluate {
		installer_osx.dependsOn(notarize)
	}

	codeSign.dependsOn {
		project.prepareKeychains
	}
}

task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	// Include the results from the `test` task in all subprojects
	reportOn subprojects*.test
}

// Skip beta and other non-final releases in the update report
dependencyUpdates.resolutionStrategy {
	componentSelection { rules ->
		rules.all { ComponentSelection selection ->
			boolean rejected = ['alpha', 'beta', 'b', 'rc', 'cr', 'm', 'pr', 'preview', 'ea'].any { qualifier ->
				selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
			}
			if (rejected) {
				selection.reject('Release candidate')
			}
		}
	}
}