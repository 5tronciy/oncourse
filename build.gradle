buildscript {
    ext {
        waCommonWebservicesClientVersion = '7.8'
    }
	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'http://repo.ish.com.au/content/groups/ish'
		}
	}

	dependencies {
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.9'
		classpath 'org.apache.cayenne:cayenne-tools:4.0.M2'
	}
}

apply plugin: 'com.github.ben-manes.versions' // adds the task 'dependencyUpdates'

allprojects {
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'jacoco' // adds the task 'jacocoTestReport'
    apply plugin: 'idea' //adds tasks cleanIdeaModule and ideaModule
    apply plugin: 'appBundler'

    // get the version from the command line properties
    version = project.hasProperty('releaseVersion') ? project.releaseVersion : "SNAPSHOT"
    
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	configurations {
		deployerJars {
			description = 'Jars needed for doing deployment to JBoss Nexus repo'
		}
	}

	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'http://repo.ish.com.au/content/groups/ish'
		}
	}

	dependencies {
		testCompile 'junit:junit:4.12'
        compile 'org.apache.logging.log4j:log4j-api:2.3'
        compile 'org.apache.logging.log4j:log4j-core:2.3'
        compile 'org.apache.logging.log4j:log4j-1.2-api:2.3'
        //log4j2 to commons-logging bridge
        compile 'org.apache.logging.log4j:log4j-jcl:2.3'
	}

	ext.sharedManifest = manifest {
		attributes 'Release-Version': version,
			'Built-Date': new Date().format("dd-MMM-yyy"),
			'Built-JDK': System.getProperty('java.version'),
			'Built-Gradle': gradle.gradleVersion,
			'Implementation-Version': System.getProperty('build_number') ?: 'local', 
            'SCM-Revision': System.getProperty('svn_revision') ?: 'development',
			'Permissions': 'all-permissions',
			'Codebase': '*',
			'Application-Name': 'onCourse',
			'Trusted-Library': 'true'
	}

	test {
		systemProperties 'java.awt.headless': 'true'
		maxHeapSize = '1024m'

        // max number of parallel test executors, default to 4
        maxParallelForks = project.hasProperty('maxParallelForks') ? project.maxParallelForks.toInteger() : 4

		jacoco {
			enabled = project.hasProperty('jacoco-enabled');
		}

		ignoreFailures = true
		
		// log each starting test
  		beforeTest { descriptor -> logger.lifecycle("Running: " + descriptor)
  		}
	}
}
	
configure(subprojects.findAll {it.name == 'server' || it.name == 'client'}) { 

	project.ext {
		appName = getProject().name == 'server' ? "onCourseServer" : "onCourse"
	}

	task prepareKeychains {
		doLast{
			if (project.hasProperty('osxKeychainPassword')) {
				logger.lifecycle("Unlocking the keychain: "+project.osxKeychain)
				exec {
					executable = 'security'
					args = ['unlock-keychain', '-p', project.osxKeychainPassword, project.osxKeychain]
				}
				logger.lifecycle("Unlocking the keychain: "+project.osxKeychain)
				exec {
					executable = 'security'
					args = ['unlock-keychain', '-p', project.osxKeychainPassword, project.osxKeychain]
				}
				logger.lifecycle("Exporting the windows keychain into pkcs12 format: "+project.codeSigningTemporaryKeystore)
				exec {
					executable= 'security'
					args = ['export', 	'-k', project.osxKeychain,
							'-t', 'all', 
							'-f', 'pkcs12',
							'-P', project.codeSigningTemporaryPassword, 
							'-o', project.codeSigningTemporaryKeystore]
				}
			} else {
				logger.lifecycle("Cannot unlock keychain, please provide osxKeychainPassword in gradle.properties")
			}
		}
	}
	

	task bundle(dependsOn: tasks.findAll { task -> task.name.startsWith('bundle_') }) {
		description "Create all application executables."
	}

	bundle.dependsOn {
		project.tasks.findAll { it.name.startsWith('bundle_') }
	}

	task installer(){
		description "Create all application installers."
	}
	installer.dependsOn {
		project.tasks.findAll { it.name.startsWith('installer_') }
	}
    codeSign.dependsOn {
        project.prepareKeychains
    }
}

task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	// Include the results from the `test` task in all subprojects
	reportOn subprojects*.test
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.4"
}
