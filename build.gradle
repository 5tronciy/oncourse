buildscript {
	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'http://repo.ish.com.au/content/groups/ish'
		}
	}

	dependencies {
		classpath 'edu.sc.seis:gradle-macappbundle:1.0.8-b2'
		classpath 'gradle_cobertura:gradle_cobertura:1.2'
		classpath 'eu.appsatori:gradle-fatjar-plugin:0.1.2'
	}
}


apply plugin: 'release'
release {
	//use subversion scm, unless otherwise specified in with -PscmFlavour= or in users gradle properties
	scm = project.hasProperty('scmFlavour') ? project.scmFlavour:'svn'
	failOnSnapshotDependencies = true

	//properties for svn access
	username = project.hasProperty('username') ? project.username : ''
	password = project.hasProperty('password') ? project.password : ''
	
	//the following two params have to be converted from string to boolean
	releaseDryRun = project.hasProperty('releaseDryRun') ? project.releaseDryRun=='true' : ''
	allowLocalModifications = project.hasProperty('allowLocalModifications') ? project.allowLocalModifications='true' : ''

}
version = release.projectVersion

allprojects {
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'eclipse'

	configurations {
		deployerJars {
			description = 'Jars needed for doing deployment to JBoss Nexus repo'
		}
	}

	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'http://repo.ish.com.au/content/groups/ish'
		}
	}

	dependencies {
		testCompile 'junit:junit:4.10'
		compile 'log4j:log4j:1.2.17'
		deployerJars 'org.apache.maven.wagon:wagon-http:2.2'
	}

	eclipse {
		jdt {
    		//has to be redefined here, as there is a bug in gradle
    		sourceCompatibility = 1.6
    		targetCompatibility = 1.6
    	}
    }

	uploadArchives.dependsOn install
	group = 'ish.oncourse.angel'
	uploadArchives {
		repositories.mavenDeployer {
			name = 'ishRepo'
			configuration = configurations.deployerJars
			repository(id:'internal-releases', url: 'http://repo.ish.com.au/content/repositories/ish-releases') {
				authentication(userName: nexusUsername, password: nexusPassword)
			}
			snapshotRepository(id:'internal-snapshots', url: 'http://repo.ish.com.au/content/repositories/ish-snapshots') {
				authentication(userName: nexusUsername, password: nexusPassword)
			}
		}
	}

	ext.sharedManifest = manifest {
		attributes 'SCM-Revision': project.release.scmVersion,
			'Release-Version': version,
			'Built-Date': new Date(),
			'Built-JDK': System.getProperty('java.version'),
			'Built-Gradle': gradle.gradleVersion,
			'Implementation-Version': System.getProperty('build_number') ?: 'local'
	}

	test {
		systemProperties 'java.awt.headless': 'true'
		maxHeapSize = '1024m'
		jvmArgs "-XX:MaxPermSize=256m"
		ignoreFailures = true  // ignore test failures so that the test aggregate still works
	}

	apply plugin: 'cobertura'
	cobertura {
		coverageFormat = 'xml'
	}
}
	
configure(subprojects.findAll {it.name == 'server' || it.name == 'client'}) { 

	project.ext {
		appName = getProject().name == 'server' ? "onCourseServer" : "onCourse"
	}

	apply plugin: 'fatjar'

	fatJarPrepareFiles {
		doLast {
			//copy few extra files, the fatjar plugin does not work with project fileset
			// the plugin's configurable 'include' is just a filter on the default fileset
			logger.lifecycle("copying generated sources")
			copy {
				into "$buildDir/tmp/fatjar-stage"
				from "$buildDir/generated-resources/main"
			}
		}
	}

	fatJar {
		// use the same manifest as normal jar
		manifest {
			from project.jar.manifest
		}

		// add a classifier to distinguish farjar from normal jar
		classifier = 'all'

		// do not include the certificate files
		exclude 'META-INF/*.SF'
		exclude 'META-INF/*.DSA'
		exclude 'META-INF/*.RSA'
	}

	task unlockKeychain {
		doLast{
			if (project.hasProperty('osxKeychainPassword')) {
				logger.lifecycle("Attempting to unlock the keychain "+macAppBundle.keyChain)
				exec {
					executable = 'security'
					args = ['unlock-keychain', '-p', project.osxKeychainPassword, macAppBundle.keyChain]
				}
			} else {
				logger.lifecycle("Cannot unlock keychain, please provide osxKeychainPassword in gradle.properties")
			}
		}
	}
	

	task bundle(dependsOn: tasks.findAll { task -> task.name.startsWith('bundle_') }) {
		description "Create all application executables."
	}

	bundle.dependsOn {
		project.tasks.findAll { it.name.startsWith('bundle_') }
	}

	task installer(){
		description "Create all application installers."
	}
	installer.dependsOn {
		project.tasks.findAll { it.name.startsWith('installer_') }
	}
}

apply plugin: 'sonar'

sonar {
    server {
        url = "http://sonar.ish.com.au"
    }
    database {
        url = "jdbc:mysql://delish.ish.com.au:3306/sonar?useUnicode=true&amp;characterEncoding=utf8"
        driverClassName = "com.mysql.jdbc.Driver"
        username = "sonar"
        password = sonarPassword
    }
	project {
		coberturaReportPath = file("$buildDir/reports/cobertura/coverage.xml")
	}
}

subprojects { 
	version = project.parent.version
}

/*

	Additional functionality which might later be turned into plugins

*/

task aggregateTestReports(type: TestReportAggregator) {
    testReportDir = file("${reporting.baseDir}/tests")
    testResultsDir = file("${buildDir}/test-results")
    projects = subprojects
}

class TestReportAggregator extends Copy {
    def projects
    File testResultsDir
    @OutputDirectory
    File testReportDir
    def TestReportAggregator() {
        dependsOn { testTasks }
        from { inputTestResultDirs }
        into { testResultsDir }
    }
    @TaskAction
    def aggregate() {
        def report = new org.gradle.api.internal.tasks.testing.junit.report.DefaultTestReport(testReportDir: testReportDir, testResultsDir: testResultsDir)
        report.generateReport()
    }
    def getTestTasks() {
        projects.collect { it.tasks.withType(Test) }.flatten()
    }
    def getInputTestResultDirs() {
        testTasks*.testResultsDir
    }
}