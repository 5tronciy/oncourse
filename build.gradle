buildscript {
	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'http://repo.ish.com.au/content/groups/ish'
		}
	}

	dependencies {
		classpath 'eu.appsatori:gradle-fatjar-plugin:0.2'
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.5-beta-1'
        classpath 'au.com.ish.gradle:release:2.1.3'
		classpath 'org.apache.cayenne:cayenne-tools:3.2M1.2'
	}
}

apply plugin: 'release'
release {
	//use scm, specified in with -PscmFlavour= or in users gradle properties. otherwise try to establish if svn of git is used
	scm = project.hasProperty('scmFlavour') ? project.scmFlavour: file("$rootDir/.svn").exists()?'svn':file("$rootDir/.git").exists()?'git':""
	assert scm.length() > 0

	failOnSnapshotDependencies = true

	//properties for svn access
	username = project.hasProperty('username') ? project.username : ''
	password = project.hasProperty('password') ? project.password : ''
	
	//the following two params have to be converted from string to boolean
	releaseDryRun = project.hasProperty('releaseDryRun') ? project.releaseDryRun=='true' : ''
	allowLocalModifications = project.hasProperty('allowLocalModifications') ? project.allowLocalModifications='true' : ''

}


allprojects {
	version = release.projectVersion
	
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'versions' // adds the task 'dependencyUpdates'
	apply plugin: 'jacoco' // adds the task 'jacocoTestReport'
    apply plugin: 'idea' //adds tasks cleanIdeaModule and ideaModule
    apply plugin: 'appBundler'

	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	configurations {
		deployerJars {
			description = 'Jars needed for doing deployment to JBoss Nexus repo'
		}
	}

	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'http://repo.ish.com.au/content/groups/ish'
		}
	}

	dependencies {
		testCompile 'junit:junit:4.11'
        compile 'org.apache.logging.log4j:log4j-api:2.0'
        compile 'org.apache.logging.log4j:log4j-core:2.0'
        compile 'org.apache.logging.log4j:log4j-1.2-api:2.0'
	}

	ext.sharedManifest = manifest {
		attributes 'SCM-Revision': project.release.scmVersion,
			'Release-Version': version,
			'Built-Date': System.getProperty('build_number') ? new Date(): new Date().format("yy-MMM-dd"),
			'Built-JDK': System.getProperty('java.version'),
			'Built-Gradle': gradle.gradleVersion,
			'Implementation-Version': System.getProperty('build_number') ?: 'local',
			'Permissions': 'all-permissions',
			'Codebase': '*',
			'Application-Name': 'onCourse',
			'Trusted-Library': 'true'
	}

	test {
		systemProperties 'java.awt.headless': 'true'
		maxHeapSize = '1024m'
		jvmArgs "-XX:MaxPermSize=256m"

		jacoco {
			enabled = project.hasProperty('jacoco-enabled') ? true : false;
		}

		ignoreFailures = true
		
		// log each starting test
  		beforeTest { descriptor -> logger.lifecycle("Running: " + descriptor)
  		}
	}
}
	
configure(subprojects.findAll {it.name == 'server' || it.name == 'client'}) { 

	project.ext {
		appName = getProject().name == 'server' ? "onCourseServer" : "onCourse"
	}

	apply plugin: 'fatjar'

	fatJarPrepareFiles {
		doLast {
			//copy few extra files, the fatjar plugin does not work with project fileset
			// the plugin's configurable 'include' is just a filter on the default fileset
			logger.lifecycle("copying generated sources")
			copy {
				into "$buildDir/tmp/fatjar-stage"
				from "$buildDir/generated-resources/main"
			}
		}
	}

	fatJar {
		// use the same manifest as normal jar
		manifest {
			from project.jar.manifest
		}

		// add a classifier to distinguish farjar from normal jar
		classifier = 'all'

		// do not include the certificate files
		exclude 'META-INF/*.SF'
		exclude 'META-INF/*.DSA'
		exclude 'META-INF/*.RSA'
	}

	task prepareKeychains {
		doLast{
			if (project.hasProperty('osxKeychainPassword')) {
				logger.lifecycle("Unlocking the keychain: "+project.osxKeychain)
				exec {
					executable = 'security'
					args = ['unlock-keychain', '-p', project.osxKeychainPassword, project.osxKeychain]
				}
				logger.lifecycle("Unlocking the keychain: "+project.osxKeychain)
				exec {
					executable = 'security'
					args = ['unlock-keychain', '-p', project.osxKeychainPassword, project.osxKeychain]
				}
				logger.lifecycle("Exporting the windows keychain into pkcs12 format: "+project.codeSigningTemporaryKeystore)
				exec {
					executable= 'security'
					args = ['export', 	'-k', project.osxKeychain,
							'-t', 'all', 
							'-f', 'pkcs12',
							'-P', project.codeSigningTemporaryPassword, 
							'-o', project.codeSigningTemporaryKeystore]
				}
			} else {
				logger.lifecycle("Cannot unlock keychain, please provide osxKeychainPassword in gradle.properties")
			}
		}
	}
	

	task bundle(dependsOn: tasks.findAll { task -> task.name.startsWith('bundle_') }) {
		description "Create all application executables."
	}

	bundle.dependsOn {
		project.tasks.findAll { it.name.startsWith('bundle_') }
	}

	task installer(){
		description "Create all application installers."
	}
	installer.dependsOn {
		project.tasks.findAll { it.name.startsWith('installer_') }
	}
    appBundle.dependsOn {
        project.fatJar
    }
    codeSign.dependsOn {
        project.prepareKeychains
    }
}

task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	// Include the results from the `test` task in all subprojects
	reportOn subprojects*.test
}

apply plugin: "sonar-runner"
sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://sonar.ish.com.au"
        property "sonar.jdbc.url", "jdbc:mysql://delish.ish.com.au:3306/sonar"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", 'sonar'
        property "sonar.jdbc.password", sonarPassword // sonar password comes from users gradle.properties file
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.0"
}
