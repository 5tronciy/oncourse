dependencies {
	compile("ish.oncourse.willow:waCommon:$waCommonWebservicesClientVersion") {
		exclude group: 'org.apache.logging.log4j'
		exclude group: 'org.springframework'
	}

	compile 'javax.jmdns:jmdns:3.4.1'

	compile "org.apache.cayenne:cayenne-client:$cayenneVersion"

	compile 'commons-httpclient:commons-httpclient:3.1'
	compile 'org.apache.commons:commons-lang3:3.7'
	compile 'org.apache.commons:commons-collections4:4.1'
	compile 'net.java.dev.textile-j:textile-j:2.2.864'
	compile 'commons-io:commons-io:2.6'
	compile "com.google.inject:guice:$googleGuiceVersion"
	compile "com.google.inject.extensions:guice-spring:$googleGuiceVersion"
	compile "org.springframework:spring-web:$springframeworkVersion"
	compile "org.springframework:spring-context:$springframeworkVersion"
    compile 'net.java.dev.jets3t:jets3t:0.9.4'
	compile 'org.scribe:scribe:1.3.7'
	compile 'org.reflections:reflections:0.9.11'

	compile 'org.quartz-scheduler:quartz:2.2.2'

	//we use DefaultArtifactVersion class from the package to compare angel versions.
	compile 'org.apache.maven:maven-artifact:3.3.3'

	testCompile 'org.mockito:mockito-core:1.10.19'
}

jar {
	manifest {
		from sharedManifest
	}
}

task testSecureRandom(dependsOn: testClasses) {
	doLast {
		def f = file("build/randomPasswordTest.txt")
		if (f.exists()) {
			f.delete();
		}

		100.times {
			ant.java(
				classname: 'ish.util.SecurityUtilTest',
				fork: true,
				classpath: sourceSets.test.runtimeClasspath.asPath,
				dir: project.projectDir,
				failonerror: true
			)
			
			// read the file, check that they are all unique
			Set<String> lines = new HashSet<String>()
			f.eachLine { s ->
	      		assert lines.add(s);
			}
		}
	}
}
